(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1909 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(declare-fun var1909-init () var1909)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun append/-1166366385 (String Int) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-fun <init>/875830710 (var1909 String) void)
(declare-const null-Int Int)
(declare-const var586 Int) ; Statement: c0 := @parameter0: char 
(assert (not (= var586 null-Int)))
(define-const var2173 Int (cast-from-Int-to-Int var586)) ; Statement: $i1 = (int) c0 
 ; Statement: tableswitch($i1) {     case 48: goto $r45 = <org.apache.commons.lang3.Conversion: boolean[] FFFF>;     case 49: goto $r42 = <org.apache.commons.lang3.Conversion: boolean[] FFFT>;     case 50: goto $r39 = <org.apache.commons.lang3.Conversion: boolean[] FFTF>;     case 51: goto $r36 = <org.apache.commons.lang3.Conversion: boolean[] FFTT>;     case 52: goto $r33 = <org.apache.commons.lang3.Conversion: boolean[] FTFF>;     case 53: goto $r30 = <org.apache.commons.lang3.Conversion: boolean[] FTFT>;     case 54: goto $r27 = <org.apache.commons.lang3.Conversion: boolean[] FTTF>;     case 55: goto $r24 = <org.apache.commons.lang3.Conversion: boolean[] FTTT>;     case 56: goto $r21 = <org.apache.commons.lang3.Conversion: boolean[] TFFF>;     case 57: goto $r18 = <org.apache.commons.lang3.Conversion: boolean[] TFFT>;     case 58: goto $r55 = new java.lang.IllegalArgumentException;     case 59: goto $r55 = new java.lang.IllegalArgumentException;     case 60: goto $r55 = new java.lang.IllegalArgumentException;     case 61: goto $r55 = new java.lang.IllegalArgumentException;     case 62: goto $r55 = new java.lang.IllegalArgumentException;     case 63: goto $r55 = new java.lang.IllegalArgumentException;     case 64: goto $r55 = new java.lang.IllegalArgumentException;     case 65: goto $r15 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;     case 66: goto $r12 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;     case 67: goto $r9 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;     case 68: goto $r6 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;     case 69: goto $r3 = <org.apache.commons.lang3.Conversion: boolean[] TTTF>;     case 70: goto $r0 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;     case 71: goto $r55 = new java.lang.IllegalArgumentException;     case 72: goto $r55 = new java.lang.IllegalArgumentException;     case 73: goto $r55 = new java.lang.IllegalArgumentException;     case 74: goto $r55 = new java.lang.IllegalArgumentException;     case 75: goto $r55 = new java.lang.IllegalArgumentException;     case 76: goto $r55 = new java.lang.IllegalArgumentException;     case 77: goto $r55 = new java.lang.IllegalArgumentException;     case 78: goto $r55 = new java.lang.IllegalArgumentException;     case 79: goto $r55 = new java.lang.IllegalArgumentException;     case 80: goto $r55 = new java.lang.IllegalArgumentException;     case 81: goto $r55 = new java.lang.IllegalArgumentException;     case 82: goto $r55 = new java.lang.IllegalArgumentException;     case 83: goto $r55 = new java.lang.IllegalArgumentException;     case 84: goto $r55 = new java.lang.IllegalArgumentException;     case 85: goto $r55 = new java.lang.IllegalArgumentException;     case 86: goto $r55 = new java.lang.IllegalArgumentException;     case 87: goto $r55 = new java.lang.IllegalArgumentException;     case 88: goto $r55 = new java.lang.IllegalArgumentException;     case 89: goto $r55 = new java.lang.IllegalArgumentException;     case 90: goto $r55 = new java.lang.IllegalArgumentException;     case 91: goto $r55 = new java.lang.IllegalArgumentException;     case 92: goto $r55 = new java.lang.IllegalArgumentException;     case 93: goto $r55 = new java.lang.IllegalArgumentException;     case 94: goto $r55 = new java.lang.IllegalArgumentException;     case 95: goto $r55 = new java.lang.IllegalArgumentException;     case 96: goto $r55 = new java.lang.IllegalArgumentException;     case 97: goto $r15 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;     case 98: goto $r12 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;     case 99: goto $r9 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;     case 100: goto $r6 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;     case 101: goto $r3 = <org.apache.commons.lang3.Conversion: boolean[] TTTF>;     case 102: goto $r0 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;     default: goto $r55 = new java.lang.IllegalArgumentException; } 
(assert (and (not (= var2173 57)) (and (not (= var2173 56)) (and (not (= var2173 55)) (and (not (= var2173 54)) (and (not (= var2173 53)) (and (not (= var2173 52)) (and (not (= var2173 51)) (and (not (= var2173 50)) (and (not (= var2173 49)) (and (not (= var2173 48)) true))))))))))) ; Intersect: Negate: Cond: $i1 == 57   and Intersect: Negate: Cond: $i1 == 56   and Intersect: Negate: Cond: $i1 == 55   and Intersect: Negate: Cond: $i1 == 54   and Intersect: Negate: Cond: $i1 == 53   and Intersect: Negate: Cond: $i1 == 52   and Intersect: Negate: Cond: $i1 == 51   and Intersect: Negate: Cond: $i1 == 50   and Intersect: Negate: Cond: $i1 == 49   and Intersect: Negate: Cond: $i1 == 48   and Non Conditional          
(define-const var1112 var1909 var1909-init) ; Statement: $r55 = new java.lang.IllegalArgumentException 
(define-const var2973 String String-init) ; Statement: $r54 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var2973)) ; Statement: specialinvoke $r54.<java.lang.StringBuilder: void <init>()>() 
(declare-const var2973!1 String)
(assert (= var2973!1 ""))
(assert true)
(define-const var935 String (append/672562846 var2973!1 "Cannot interpret \u0027")) ; Statement: $r50 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot interpret \'") 
(declare-const var2973!2 String)
(assert (= var2973!2 (str.++ var2973!1 "Cannot interpret \u0027")))
(assert true)
(define-const var3973 String (append/-1166366385 var935 var586)) ; Statement: $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0) 
(declare-const var935!1 String)
(assert (str.prefixof var935 var935!1))
(assert true)
(define-const var3815 String (append/672562846 var3973 "\u0027 as a hexadecimal digit")) ; Statement: $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as a hexadecimal digit") 
(declare-const var3973!1 String)
(assert (= var3973!1 (str.++ var3973 "\u0027 as a hexadecimal digit")))
(assert true)
(define-const var456 String (toString/-2075883882 var3815)) ; Statement: $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (<init>/875830710 var1112 var456)) ; Statement: specialinvoke $r55.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r53) 

(declare-const var1112!1 var1909)
(declare-const var456!1 String)
 ; Statement: throw $r55 
(check-sat)
(get-model)
(get-unsat-core)
; {cast-from-Int-to-Int=([char], int), var1909-init=([], java.lang.IllegalArgumentException), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), append/-1166366385=([java.lang.StringBuilder, char], java.lang.StringBuilder), toString/-2075883882=([java.lang.StringBuilder], java.lang.String), <init>/875830710=([java.lang.IllegalArgumentException, java.lang.String], void)}
; {var586=c0, var2173=$i1, var1909=java.lang.IllegalArgumentException, var1112=$r55, var2973=$r54, var935=$r50, var3973=$r51, var3815=$r52, var456=$r53}
; {c0=var586, $i1=var2173, java.lang.IllegalArgumentException=var1909, $r55=var1112, $r54=var2973, $r50=var935, $r51=var3973, $r52=var3815, $r53=var456}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts c0 := @parameter0: char;	$i1 = (int) c0;	tableswitch($i1) {     case 48: goto $r45 = <org.apache.commons.lang3.Conversion: boolean[] FFFF>;     case 49: goto $r42 = <org.apache.commons.lang3.Conversion: boolean[] FFFT>;     case 50: goto $r39 = <org.apache.commons.lang3.Conversion: boolean[] FFTF>;     case 51: goto $r36 = <org.apache.commons.lang3.Conversion: boolean[] FFTT>;     case 52: goto $r33 = <org.apache.commons.lang3.Conversion: boolean[] FTFF>;     case 53: goto $r30 = <org.apache.commons.lang3.Conversion: boolean[] FTFT>;     case 54: goto $r27 = <org.apache.commons.lang3.Conversion: boolean[] FTTF>;     case 55: goto $r24 = <org.apache.commons.lang3.Conversion: boolean[] FTTT>;     case 56: goto $r21 = <org.apache.commons.lang3.Conversion: boolean[] TFFF>;     case 57: goto $r18 = <org.apache.commons.lang3.Conversion: boolean[] TFFT>;     case 58: goto $r55 = new java.lang.IllegalArgumentException;     case 59: goto $r55 = new java.lang.IllegalArgumentException;     case 60: goto $r55 = new java.lang.IllegalArgumentException;     case 61: goto $r55 = new java.lang.IllegalArgumentException;     case 62: goto $r55 = new java.lang.IllegalArgumentException;     case 63: goto $r55 = new java.lang.IllegalArgumentException;     case 64: goto $r55 = new java.lang.IllegalArgumentException;     case 65: goto $r15 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;     case 66: goto $r12 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;     case 67: goto $r9 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;     case 68: goto $r6 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;     case 69: goto $r3 = <org.apache.commons.lang3.Conversion: boolean[] TTTF>;     case 70: goto $r0 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;     case 71: goto $r55 = new java.lang.IllegalArgumentException;     case 72: goto $r55 = new java.lang.IllegalArgumentException;     case 73: goto $r55 = new java.lang.IllegalArgumentException;     case 74: goto $r55 = new java.lang.IllegalArgumentException;     case 75: goto $r55 = new java.lang.IllegalArgumentException;     case 76: goto $r55 = new java.lang.IllegalArgumentException;     case 77: goto $r55 = new java.lang.IllegalArgumentException;     case 78: goto $r55 = new java.lang.IllegalArgumentException;     case 79: goto $r55 = new java.lang.IllegalArgumentException;     case 80: goto $r55 = new java.lang.IllegalArgumentException;     case 81: goto $r55 = new java.lang.IllegalArgumentException;     case 82: goto $r55 = new java.lang.IllegalArgumentException;     case 83: goto $r55 = new java.lang.IllegalArgumentException;     case 84: goto $r55 = new java.lang.IllegalArgumentException;     case 85: goto $r55 = new java.lang.IllegalArgumentException;     case 86: goto $r55 = new java.lang.IllegalArgumentException;     case 87: goto $r55 = new java.lang.IllegalArgumentException;     case 88: goto $r55 = new java.lang.IllegalArgumentException;     case 89: goto $r55 = new java.lang.IllegalArgumentException;     case 90: goto $r55 = new java.lang.IllegalArgumentException;     case 91: goto $r55 = new java.lang.IllegalArgumentException;     case 92: goto $r55 = new java.lang.IllegalArgumentException;     case 93: goto $r55 = new java.lang.IllegalArgumentException;     case 94: goto $r55 = new java.lang.IllegalArgumentException;     case 95: goto $r55 = new java.lang.IllegalArgumentException;     case 96: goto $r55 = new java.lang.IllegalArgumentException;     case 97: goto $r15 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;     case 98: goto $r12 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;     case 99: goto $r9 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;     case 100: goto $r6 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;     case 101: goto $r3 = <org.apache.commons.lang3.Conversion: boolean[] TTTF>;     case 102: goto $r0 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;     default: goto $r55 = new java.lang.IllegalArgumentException; };	$r55 = new java.lang.IllegalArgumentException;	$r54 = new java.lang.StringBuilder;	specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();	$r50 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot interpret \'");	$r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);	$r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as a hexadecimal digit");	$r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();	specialinvoke $r55.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r53);	throw $r55
;block_num 2