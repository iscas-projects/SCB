(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(declare-const null-Int Int)
(declare-const var1089 Int) ; Statement: c0 := @parameter0: char 
(assert (not (= var1089 null-Int)))
(define-const var1760 Int (cast-from-Int-to-Int var1089)) ; Statement: $i1 = (int) c0 
 ; Statement: tableswitch($i1) {     case 48: goto return 0;     case 49: goto return 8;     case 50: goto return 4;     case 51: goto return 12;     case 52: goto return 2;     case 53: goto return 10;     case 54: goto return 6;     case 55: goto return 14;     case 56: goto return 1;     case 57: goto return 9;     case 58: goto $r7 = new java.lang.IllegalArgumentException;     case 59: goto $r7 = new java.lang.IllegalArgumentException;     case 60: goto $r7 = new java.lang.IllegalArgumentException;     case 61: goto $r7 = new java.lang.IllegalArgumentException;     case 62: goto $r7 = new java.lang.IllegalArgumentException;     case 63: goto $r7 = new java.lang.IllegalArgumentException;     case 64: goto $r7 = new java.lang.IllegalArgumentException;     case 65: goto return 5;     case 66: goto return 13;     case 67: goto return 3;     case 68: goto return 11;     case 69: goto return 7;     case 70: goto return 15;     case 71: goto $r7 = new java.lang.IllegalArgumentException;     case 72: goto $r7 = new java.lang.IllegalArgumentException;     case 73: goto $r7 = new java.lang.IllegalArgumentException;     case 74: goto $r7 = new java.lang.IllegalArgumentException;     case 75: goto $r7 = new java.lang.IllegalArgumentException;     case 76: goto $r7 = new java.lang.IllegalArgumentException;     case 77: goto $r7 = new java.lang.IllegalArgumentException;     case 78: goto $r7 = new java.lang.IllegalArgumentException;     case 79: goto $r7 = new java.lang.IllegalArgumentException;     case 80: goto $r7 = new java.lang.IllegalArgumentException;     case 81: goto $r7 = new java.lang.IllegalArgumentException;     case 82: goto $r7 = new java.lang.IllegalArgumentException;     case 83: goto $r7 = new java.lang.IllegalArgumentException;     case 84: goto $r7 = new java.lang.IllegalArgumentException;     case 85: goto $r7 = new java.lang.IllegalArgumentException;     case 86: goto $r7 = new java.lang.IllegalArgumentException;     case 87: goto $r7 = new java.lang.IllegalArgumentException;     case 88: goto $r7 = new java.lang.IllegalArgumentException;     case 89: goto $r7 = new java.lang.IllegalArgumentException;     case 90: goto $r7 = new java.lang.IllegalArgumentException;     case 91: goto $r7 = new java.lang.IllegalArgumentException;     case 92: goto $r7 = new java.lang.IllegalArgumentException;     case 93: goto $r7 = new java.lang.IllegalArgumentException;     case 94: goto $r7 = new java.lang.IllegalArgumentException;     case 95: goto $r7 = new java.lang.IllegalArgumentException;     case 96: goto $r7 = new java.lang.IllegalArgumentException;     case 97: goto return 5;     case 98: goto return 13;     case 99: goto return 3;     case 100: goto return 11;     case 101: goto return 7;     case 102: goto return 15;     default: goto $r7 = new java.lang.IllegalArgumentException; } 
(assert (and (= var1760 68) (and (not (= var1760 67)) (and (not (= var1760 66)) (and (not (= var1760 65)) (and (not (= var1760 64)) (and (not (= var1760 63)) (and (not (= var1760 62)) (and (not (= var1760 61)) (and (not (= var1760 60)) (and (not (= var1760 59)) (and (not (= var1760 58)) (and (not (= var1760 57)) (and (not (= var1760 56)) (and (not (= var1760 55)) (and (not (= var1760 54)) (and (not (= var1760 53)) (and (not (= var1760 52)) (and (not (= var1760 51)) (and (not (= var1760 50)) (and (not (= var1760 49)) (and (not (= var1760 48)) true)))))))))))))))))))))) ; Intersect: Cond: $i1 == 68  and Intersect: Negate: Cond: $i1 == 67   and Intersect: Negate: Cond: $i1 == 66   and Intersect: Negate: Cond: $i1 == 65   and Intersect: Negate: Cond: $i1 == 64   and Intersect: Negate: Cond: $i1 == 63   and Intersect: Negate: Cond: $i1 == 62   and Intersect: Negate: Cond: $i1 == 61   and Intersect: Negate: Cond: $i1 == 60   and Intersect: Negate: Cond: $i1 == 59   and Intersect: Negate: Cond: $i1 == 58   and Intersect: Negate: Cond: $i1 == 57   and Intersect: Negate: Cond: $i1 == 56   and Intersect: Negate: Cond: $i1 == 55   and Intersect: Negate: Cond: $i1 == 54   and Intersect: Negate: Cond: $i1 == 53   and Intersect: Negate: Cond: $i1 == 52   and Intersect: Negate: Cond: $i1 == 51   and Intersect: Negate: Cond: $i1 == 50   and Intersect: Negate: Cond: $i1 == 49   and Intersect: Negate: Cond: $i1 == 48   and Non Conditional                     
 ; Statement: return 11 
(check-sat)
(get-model)
(get-unsat-core)
; {cast-from-Int-to-Int=([char], int)}
; {var1089=c0, var1760=$i1}
; {c0=var1089, $i1=var1760}
;seq 
;cnt {}
;stmts c0 := @parameter0: char;	$i1 = (int) c0;	tableswitch($i1) {     case 48: goto return 0;     case 49: goto return 8;     case 50: goto return 4;     case 51: goto return 12;     case 52: goto return 2;     case 53: goto return 10;     case 54: goto return 6;     case 55: goto return 14;     case 56: goto return 1;     case 57: goto return 9;     case 58: goto $r7 = new java.lang.IllegalArgumentException;     case 59: goto $r7 = new java.lang.IllegalArgumentException;     case 60: goto $r7 = new java.lang.IllegalArgumentException;     case 61: goto $r7 = new java.lang.IllegalArgumentException;     case 62: goto $r7 = new java.lang.IllegalArgumentException;     case 63: goto $r7 = new java.lang.IllegalArgumentException;     case 64: goto $r7 = new java.lang.IllegalArgumentException;     case 65: goto return 5;     case 66: goto return 13;     case 67: goto return 3;     case 68: goto return 11;     case 69: goto return 7;     case 70: goto return 15;     case 71: goto $r7 = new java.lang.IllegalArgumentException;     case 72: goto $r7 = new java.lang.IllegalArgumentException;     case 73: goto $r7 = new java.lang.IllegalArgumentException;     case 74: goto $r7 = new java.lang.IllegalArgumentException;     case 75: goto $r7 = new java.lang.IllegalArgumentException;     case 76: goto $r7 = new java.lang.IllegalArgumentException;     case 77: goto $r7 = new java.lang.IllegalArgumentException;     case 78: goto $r7 = new java.lang.IllegalArgumentException;     case 79: goto $r7 = new java.lang.IllegalArgumentException;     case 80: goto $r7 = new java.lang.IllegalArgumentException;     case 81: goto $r7 = new java.lang.IllegalArgumentException;     case 82: goto $r7 = new java.lang.IllegalArgumentException;     case 83: goto $r7 = new java.lang.IllegalArgumentException;     case 84: goto $r7 = new java.lang.IllegalArgumentException;     case 85: goto $r7 = new java.lang.IllegalArgumentException;     case 86: goto $r7 = new java.lang.IllegalArgumentException;     case 87: goto $r7 = new java.lang.IllegalArgumentException;     case 88: goto $r7 = new java.lang.IllegalArgumentException;     case 89: goto $r7 = new java.lang.IllegalArgumentException;     case 90: goto $r7 = new java.lang.IllegalArgumentException;     case 91: goto $r7 = new java.lang.IllegalArgumentException;     case 92: goto $r7 = new java.lang.IllegalArgumentException;     case 93: goto $r7 = new java.lang.IllegalArgumentException;     case 94: goto $r7 = new java.lang.IllegalArgumentException;     case 95: goto $r7 = new java.lang.IllegalArgumentException;     case 96: goto $r7 = new java.lang.IllegalArgumentException;     case 97: goto return 5;     case 98: goto return 13;     case 99: goto return 3;     case 100: goto return 11;     case 101: goto return 7;     case 102: goto return 15;     default: goto $r7 = new java.lang.IllegalArgumentException; };	return 11
;block_num 2