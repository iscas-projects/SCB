(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1016 0)
(declare-sort var3023 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun String_valueOf/-371898945 (Int) String)
(declare-fun var3023_addEscapes/-2068437822 (String) String)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-Bool Bool)
(declare-const null-Int Int)
(declare-const null-String String)
(declare-const var1706 Bool) ; Statement: z0 := @parameter0: boolean 
(assert (not (= var1706 null-Bool)))
(declare-const var1836 Int) ; Statement: i3 := @parameter1: int 
(assert (not (= var1836 null-Int)))
(declare-const var3200 Int) ; Statement: i0 := @parameter2: int 
(assert (not (= var3200 null-Int)))
(declare-const var3413 Int) ; Statement: i1 := @parameter3: int 
(assert (not (= var3413 null-Int)))
(declare-const var1517 String) ; Statement: r16 := @parameter4: java.lang.String 
(assert (not (= var1517 null-String)))
(declare-const var1322 Int) ; Statement: c2 := @parameter5: char 
(assert (not (= var1322 null-Int)))
(define-const var1925 String String-init) ; Statement: $r23 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1925)) ; Statement: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1925!1 String)
(assert (= var1925!1 ""))
(assert true)
(define-const var2862 String (append/672562846 var1925!1 "Lexical error at line ")) ; Statement: $r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ") 
(declare-const var1925!2 String)
(assert (= var1925!2 (str.++ var1925!1 "Lexical error at line ")))
(assert true)
(define-const var1252 String (append/-1001720160 var2862 var3200)) ; Statement: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) 
(declare-const var2862!1 String)
(assert (str.prefixof var2862 var2862!1))
(assert true)
(define-const var1098 String (append/672562846 var1252 ", column ")) ; Statement: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ") 
(declare-const var1252!1 String)
(assert (= var1252!1 (str.++ var1252 ", column ")))
(assert true)
(define-const var179 String (append/-1001720160 var1098 var3413)) ; Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) 
(declare-const var1098!1 String)
(assert (str.prefixof var1098 var1098!1))
(assert true)
(define-const var1001 String (append/672562846 var179 ".  Encountered: ")) ; Statement: $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ") 
(declare-const var179!1 String)
(assert (= var179!1 (str.++ var179 ".  Encountered: ")))
 ; Statement: if z0 == 0 goto $r24 = new java.lang.StringBuilder 
(assert (= (ite var1706 1 0) 0)) ; Cond: z0 == 0 
(define-const var1899 String String-init) ; Statement: $r24 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1899)) ; Statement: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1899!1 String)
(assert (= var1899!1 ""))
(assert true)
(define-const var657 String (append/672562846 var1899!1 "\u0022")) ; Statement: $r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var1899!2 String)
(assert (= var1899!2 (str.++ var1899!1 "\u0022")))
(define-const var2356 String (String_valueOf/-371898945 var1322)) ; Statement: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2) 
(define-const var2741 String (var3023_addEscapes/-2068437822 var2356)) ; Statement: $r7 = staticinvoke <org.javacc.utils.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($r6) 
(assert true)
(define-const var2101 String (append/672562846 var657 var2741)) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) 
(declare-const var657!1 String)
(assert (= var657!1 (str.++ var657 var2741)))
(assert true)
(define-const var274 String (append/672562846 var2101 "\u0022")) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var2101!1 String)
(assert (= var2101!1 (str.++ var2101 "\u0022")))
(assert true)
(define-const var2276 String (append/672562846 var274 " (")) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") 
(declare-const var274!1 String)
(assert (= var274!1 (str.++ var274 " (")))
(define-const var161 Int (cast-from-Int-to-Int var1322)) ; Statement: $i4 = (int) c2 
(assert true)
(define-const var40 String (append/-1001720160 var2276 var161)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) 
(declare-const var2276!1 String)
(assert (str.prefixof var2276 var2276!1))
(assert true)
(define-const var1710 String (append/672562846 var40 "), ")) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ") 
(declare-const var40!1 String)
(assert (= var40!1 (str.++ var40 "), ")))
(assert true)
(define-const var3649 String (toString/-2075883882 var1710)) ; Statement: $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true) ; Non Conditional
(assert true)
(define-const var2385 String (append/672562846 var1001 var3649)) ; Statement: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) 
(declare-const var1001!1 String)
(assert (= var1001!1 (str.++ var1001 var3649)))
(assert true)
(define-const var1163 String (append/672562846 var2385 "after : \u0022")) ; Statement: $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"") 
(declare-const var2385!1 String)
(assert (= var2385!1 (str.++ var2385 "after : \u0022")))
(define-const var3146 String (var3023_addEscapes/-2068437822 var1517)) ; Statement: $r17 = staticinvoke <org.javacc.utils.TokenMgrError: java.lang.String addEscapes(java.lang.String)>(r16) 
(assert true)
(define-const var3229 String (append/672562846 var1163 var3146)) ; Statement: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) 
(declare-const var1163!1 String)
(assert (= var1163!1 (str.++ var1163 var3146)))
(assert true)
(define-const var2787 String (append/672562846 var3229 "\u0022")) ; Statement: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var3229!1 String)
(assert (= var3229!1 (str.++ var3229 "\u0022")))
(assert true)
(define-const var2647 String (toString/-2075883882 var2787)) ; Statement: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r21 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), String_valueOf/-371898945=([char], java.lang.String), var3023_addEscapes/-2068437822=([java.lang.String], java.lang.String), cast-from-Int-to-Int=([char], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var1706=z0, var1836=i3, var3200=i0, var3413=i1, var1517=r16, var1016=null_type, var1322=c2, var1925=$r23, var2862=$r1, var1252=$r2, var1098=$r3, var179=$r4, var1001=$r14, var1899=$r24, var657=$r8, var2356=$r6, var3023=org.javacc.utils.TokenMgrError, var2741=$r7, var2101=$r9, var274=$r10, var2276=$r11, var161=$i4, var40=$r12, var1710=$r13, var3649=$r22, var2385=$r15, var1163=$r18, var3146=$r17, var3229=$r19, var2787=$r20, var2647=$r21}
; {z0=var1706, i3=var1836, i0=var3200, i1=var3413, r16=var1517, null_type=var1016, c2=var1322, $r23=var1925, $r1=var2862, $r2=var1252, $r3=var1098, $r4=var179, $r14=var1001, $r24=var1899, $r8=var657, $r6=var2356, org.javacc.utils.TokenMgrError=var3023, $r7=var2741, $r9=var2101, $r10=var274, $r11=var2276, $i4=var161, $r12=var40, $r13=var1710, $r22=var3649, $r15=var2385, $r18=var1163, $r17=var3146, $r19=var3229, $r20=var2787, $r21=var2647}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.String: java.lang.String valueOf(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 12,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 3,"<java.lang.String: java.lang.String valueOf(char)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 2}
;stmts z0 := @parameter0: boolean;	i3 := @parameter1: int;	i0 := @parameter2: int;	i1 := @parameter3: int;	r16 := @parameter4: java.lang.String;	c2 := @parameter5: char;	$r23 = new java.lang.StringBuilder;	specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();	$r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ");	$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);	$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");	$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);	$r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ");	if z0 == 0 goto $r24 = new java.lang.StringBuilder;	$r24 = new java.lang.StringBuilder;	specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();	$r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2);	$r7 = staticinvoke <org.javacc.utils.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($r6);	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");	$i4 = (int) c2;	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");	$r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();	$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);	$r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"");	$r17 = staticinvoke <org.javacc.utils.TokenMgrError: java.lang.String addEscapes(java.lang.String)>(r16);	$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);	$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();	return $r21
;block_num 3