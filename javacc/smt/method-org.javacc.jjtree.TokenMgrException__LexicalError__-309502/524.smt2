(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var152 0)
(declare-sort var2230 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun String_valueOf/-371898945 (Int) String)
(declare-fun var2230_addEscapes/-1529316606 (String) String)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-Bool Bool)
(declare-const null-Int Int)
(declare-const null-String String)
(declare-const var3004 Bool) ; Statement: z0 := @parameter0: boolean 
(assert (not (= var3004 null-Bool)))
(declare-const var361 Int) ; Statement: i3 := @parameter1: int 
(assert (not (= var361 null-Int)))
(declare-const var2596 Int) ; Statement: i0 := @parameter2: int 
(assert (not (= var2596 null-Int)))
(declare-const var3001 Int) ; Statement: i1 := @parameter3: int 
(assert (not (= var3001 null-Int)))
(declare-const var510 String) ; Statement: r16 := @parameter4: java.lang.String 
(assert (not (= var510 null-String)))
(declare-const var3343 Int) ; Statement: c2 := @parameter5: char 
(assert (not (= var3343 null-Int)))
(define-const var1266 String String-init) ; Statement: $r23 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1266)) ; Statement: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1266!1 String)
(assert (= var1266!1 ""))
(assert true)
(define-const var1979 String (append/672562846 var1266!1 "Lexical error at line ")) ; Statement: $r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ") 
(declare-const var1266!2 String)
(assert (= var1266!2 (str.++ var1266!1 "Lexical error at line ")))
(assert true)
(define-const var3418 String (append/-1001720160 var1979 var2596)) ; Statement: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) 
(declare-const var1979!1 String)
(assert (str.prefixof var1979 var1979!1))
(assert true)
(define-const var2803 String (append/672562846 var3418 ", column ")) ; Statement: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ") 
(declare-const var3418!1 String)
(assert (= var3418!1 (str.++ var3418 ", column ")))
(assert true)
(define-const var1643 String (append/-1001720160 var2803 var3001)) ; Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) 
(declare-const var2803!1 String)
(assert (str.prefixof var2803 var2803!1))
(assert true)
(define-const var631 String (append/672562846 var1643 ".  Encountered: ")) ; Statement: $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ") 
(declare-const var1643!1 String)
(assert (= var1643!1 (str.++ var1643 ".  Encountered: ")))
 ; Statement: if z0 == 0 goto $r24 = new java.lang.StringBuilder 
(assert (= (ite var3004 1 0) 0)) ; Cond: z0 == 0 
(define-const var71 String String-init) ; Statement: $r24 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var71)) ; Statement: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() 
(declare-const var71!1 String)
(assert (= var71!1 ""))
(assert true)
(define-const var2831 String (append/672562846 var71!1 "\u0022")) ; Statement: $r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var71!2 String)
(assert (= var71!2 (str.++ var71!1 "\u0022")))
(define-const var246 String (String_valueOf/-371898945 var3343)) ; Statement: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2) 
(define-const var900 String (var2230_addEscapes/-1529316606 var246)) ; Statement: $r7 = staticinvoke <org.javacc.jjtree.TokenMgrException: java.lang.String addEscapes(java.lang.String)>($r6) 
(assert true)
(define-const var1767 String (append/672562846 var2831 var900)) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) 
(declare-const var2831!1 String)
(assert (= var2831!1 (str.++ var2831 var900)))
(assert true)
(define-const var1453 String (append/672562846 var1767 "\u0022")) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var1767!1 String)
(assert (= var1767!1 (str.++ var1767 "\u0022")))
(assert true)
(define-const var1001 String (append/672562846 var1453 " (")) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") 
(declare-const var1453!1 String)
(assert (= var1453!1 (str.++ var1453 " (")))
(define-const var2702 Int (cast-from-Int-to-Int var3343)) ; Statement: $i4 = (int) c2 
(assert true)
(define-const var1838 String (append/-1001720160 var1001 var2702)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) 
(declare-const var1001!1 String)
(assert (str.prefixof var1001 var1001!1))
(assert true)
(define-const var111 String (append/672562846 var1838 "), ")) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ") 
(declare-const var1838!1 String)
(assert (= var1838!1 (str.++ var1838 "), ")))
(assert true)
(define-const var1754 String (toString/-2075883882 var111)) ; Statement: $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true) ; Non Conditional
(assert true)
(define-const var2239 String (append/672562846 var631 var1754)) ; Statement: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) 
(declare-const var631!1 String)
(assert (= var631!1 (str.++ var631 var1754)))
(assert true)
(define-const var2150 String (append/672562846 var2239 "after : \u0022")) ; Statement: $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"") 
(declare-const var2239!1 String)
(assert (= var2239!1 (str.++ var2239 "after : \u0022")))
(define-const var3022 String (var2230_addEscapes/-1529316606 var510)) ; Statement: $r17 = staticinvoke <org.javacc.jjtree.TokenMgrException: java.lang.String addEscapes(java.lang.String)>(r16) 
(assert true)
(define-const var3088 String (append/672562846 var2150 var3022)) ; Statement: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) 
(declare-const var2150!1 String)
(assert (= var2150!1 (str.++ var2150 var3022)))
(assert true)
(define-const var2465 String (append/672562846 var3088 "\u0022")) ; Statement: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var3088!1 String)
(assert (= var3088!1 (str.++ var3088 "\u0022")))
(assert true)
(define-const var1828 String (toString/-2075883882 var2465)) ; Statement: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r21 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), String_valueOf/-371898945=([char], java.lang.String), var2230_addEscapes/-1529316606=([java.lang.String], java.lang.String), cast-from-Int-to-Int=([char], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var3004=z0, var361=i3, var2596=i0, var3001=i1, var510=r16, var152=null_type, var3343=c2, var1266=$r23, var1979=$r1, var3418=$r2, var2803=$r3, var1643=$r4, var631=$r14, var71=$r24, var2831=$r8, var246=$r6, var2230=org.javacc.jjtree.TokenMgrException, var900=$r7, var1767=$r9, var1453=$r10, var1001=$r11, var2702=$i4, var1838=$r12, var111=$r13, var1754=$r22, var2239=$r15, var2150=$r18, var3022=$r17, var3088=$r19, var2465=$r20, var1828=$r21}
; {z0=var3004, i3=var361, i0=var2596, i1=var3001, r16=var510, null_type=var152, c2=var3343, $r23=var1266, $r1=var1979, $r2=var3418, $r3=var2803, $r4=var1643, $r14=var631, $r24=var71, $r8=var2831, $r6=var246, org.javacc.jjtree.TokenMgrException=var2230, $r7=var900, $r9=var1767, $r10=var1453, $r11=var1001, $i4=var2702, $r12=var1838, $r13=var111, $r22=var1754, $r15=var2239, $r18=var2150, $r17=var3022, $r19=var3088, $r20=var2465, $r21=var1828}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.String: java.lang.String valueOf(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 12,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 3,"<java.lang.String: java.lang.String valueOf(char)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 2}
;stmts z0 := @parameter0: boolean;	i3 := @parameter1: int;	i0 := @parameter2: int;	i1 := @parameter3: int;	r16 := @parameter4: java.lang.String;	c2 := @parameter5: char;	$r23 = new java.lang.StringBuilder;	specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();	$r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ");	$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);	$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");	$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);	$r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ");	if z0 == 0 goto $r24 = new java.lang.StringBuilder;	$r24 = new java.lang.StringBuilder;	specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();	$r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2);	$r7 = staticinvoke <org.javacc.jjtree.TokenMgrException: java.lang.String addEscapes(java.lang.String)>($r6);	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");	$i4 = (int) c2;	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");	$r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();	$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);	$r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"");	$r17 = staticinvoke <org.javacc.jjtree.TokenMgrException: java.lang.String addEscapes(java.lang.String)>(r16);	$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);	$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();	return $r21
;block_num 3