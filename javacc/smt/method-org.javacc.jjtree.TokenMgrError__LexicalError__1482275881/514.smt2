(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1549 0)
(declare-sort var2080 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun String_valueOf/-371898945 (Int) String)
(declare-fun var2080_addEscapes/1388005947 (String) String)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-Bool Bool)
(declare-const null-Int Int)
(declare-const null-String String)
(declare-const var1178 Bool) ; Statement: z0 := @parameter0: boolean 
(assert (not (= var1178 null-Bool)))
(declare-const var1864 Int) ; Statement: i3 := @parameter1: int 
(assert (not (= var1864 null-Int)))
(declare-const var3567 Int) ; Statement: i0 := @parameter2: int 
(assert (not (= var3567 null-Int)))
(declare-const var2985 Int) ; Statement: i1 := @parameter3: int 
(assert (not (= var2985 null-Int)))
(declare-const var1306 String) ; Statement: r16 := @parameter4: java.lang.String 
(assert (not (= var1306 null-String)))
(declare-const var3713 Int) ; Statement: c2 := @parameter5: char 
(assert (not (= var3713 null-Int)))
(define-const var894 String String-init) ; Statement: $r23 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var894)) ; Statement: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() 
(declare-const var894!1 String)
(assert (= var894!1 ""))
(assert true)
(define-const var786 String (append/672562846 var894!1 "Lexical error at line ")) ; Statement: $r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ") 
(declare-const var894!2 String)
(assert (= var894!2 (str.++ var894!1 "Lexical error at line ")))
(assert true)
(define-const var561 String (append/-1001720160 var786 var3567)) ; Statement: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) 
(declare-const var786!1 String)
(assert (str.prefixof var786 var786!1))
(assert true)
(define-const var1077 String (append/672562846 var561 ", column ")) ; Statement: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ") 
(declare-const var561!1 String)
(assert (= var561!1 (str.++ var561 ", column ")))
(assert true)
(define-const var3959 String (append/-1001720160 var1077 var2985)) ; Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) 
(declare-const var1077!1 String)
(assert (str.prefixof var1077 var1077!1))
(assert true)
(define-const var2036 String (append/672562846 var3959 ".  Encountered: ")) ; Statement: $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ") 
(declare-const var3959!1 String)
(assert (= var3959!1 (str.++ var3959 ".  Encountered: ")))
 ; Statement: if z0 == 0 goto $r24 = new java.lang.StringBuilder 
(assert (= (ite var1178 1 0) 0)) ; Cond: z0 == 0 
(define-const var2181 String String-init) ; Statement: $r24 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var2181)) ; Statement: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() 
(declare-const var2181!1 String)
(assert (= var2181!1 ""))
(assert true)
(define-const var1033 String (append/672562846 var2181!1 "\u0022")) ; Statement: $r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var2181!2 String)
(assert (= var2181!2 (str.++ var2181!1 "\u0022")))
(define-const var1539 String (String_valueOf/-371898945 var3713)) ; Statement: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2) 
(define-const var2280 String (var2080_addEscapes/1388005947 var1539)) ; Statement: $r7 = staticinvoke <org.javacc.jjtree.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($r6) 
(assert true)
(define-const var1398 String (append/672562846 var1033 var2280)) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) 
(declare-const var1033!1 String)
(assert (= var1033!1 (str.++ var1033 var2280)))
(assert true)
(define-const var2134 String (append/672562846 var1398 "\u0022")) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var1398!1 String)
(assert (= var1398!1 (str.++ var1398 "\u0022")))
(assert true)
(define-const var1972 String (append/672562846 var2134 " (")) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") 
(declare-const var2134!1 String)
(assert (= var2134!1 (str.++ var2134 " (")))
(define-const var2385 Int (cast-from-Int-to-Int var3713)) ; Statement: $i4 = (int) c2 
(assert true)
(define-const var939 String (append/-1001720160 var1972 var2385)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) 
(declare-const var1972!1 String)
(assert (str.prefixof var1972 var1972!1))
(assert true)
(define-const var162 String (append/672562846 var939 "), ")) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ") 
(declare-const var939!1 String)
(assert (= var939!1 (str.++ var939 "), ")))
(assert true)
(define-const var846 String (toString/-2075883882 var162)) ; Statement: $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true) ; Non Conditional
(assert true)
(define-const var493 String (append/672562846 var2036 var846)) ; Statement: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) 
(declare-const var2036!1 String)
(assert (= var2036!1 (str.++ var2036 var846)))
(assert true)
(define-const var3369 String (append/672562846 var493 "after : \u0022")) ; Statement: $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"") 
(declare-const var493!1 String)
(assert (= var493!1 (str.++ var493 "after : \u0022")))
(define-const var3437 String (var2080_addEscapes/1388005947 var1306)) ; Statement: $r17 = staticinvoke <org.javacc.jjtree.TokenMgrError: java.lang.String addEscapes(java.lang.String)>(r16) 
(assert true)
(define-const var3992 String (append/672562846 var3369 var3437)) ; Statement: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) 
(declare-const var3369!1 String)
(assert (= var3369!1 (str.++ var3369 var3437)))
(assert true)
(define-const var3311 String (append/672562846 var3992 "\u0022")) ; Statement: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") 
(declare-const var3992!1 String)
(assert (= var3992!1 (str.++ var3992 "\u0022")))
(assert true)
(define-const var328 String (toString/-2075883882 var3311)) ; Statement: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r21 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), String_valueOf/-371898945=([char], java.lang.String), var2080_addEscapes/1388005947=([java.lang.String], java.lang.String), cast-from-Int-to-Int=([char], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var1178=z0, var1864=i3, var3567=i0, var2985=i1, var1306=r16, var1549=null_type, var3713=c2, var894=$r23, var786=$r1, var561=$r2, var1077=$r3, var3959=$r4, var2036=$r14, var2181=$r24, var1033=$r8, var1539=$r6, var2080=org.javacc.jjtree.TokenMgrError, var2280=$r7, var1398=$r9, var2134=$r10, var1972=$r11, var2385=$i4, var939=$r12, var162=$r13, var846=$r22, var493=$r15, var3369=$r18, var3437=$r17, var3992=$r19, var3311=$r20, var328=$r21}
; {z0=var1178, i3=var1864, i0=var3567, i1=var2985, r16=var1306, null_type=var1549, c2=var3713, $r23=var894, $r1=var786, $r2=var561, $r3=var1077, $r4=var3959, $r14=var2036, $r24=var2181, $r8=var1033, $r6=var1539, org.javacc.jjtree.TokenMgrError=var2080, $r7=var2280, $r9=var1398, $r10=var2134, $r11=var1972, $i4=var2385, $r12=var939, $r13=var162, $r22=var846, $r15=var493, $r18=var3369, $r17=var3437, $r19=var3992, $r20=var3311, $r21=var328}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.String: java.lang.String valueOf(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 12,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 3,"<java.lang.String: java.lang.String valueOf(char)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 2}
;stmts z0 := @parameter0: boolean;	i3 := @parameter1: int;	i0 := @parameter2: int;	i1 := @parameter3: int;	r16 := @parameter4: java.lang.String;	c2 := @parameter5: char;	$r23 = new java.lang.StringBuilder;	specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();	$r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ");	$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);	$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");	$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);	$r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ");	if z0 == 0 goto $r24 = new java.lang.StringBuilder;	$r24 = new java.lang.StringBuilder;	specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();	$r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2);	$r7 = staticinvoke <org.javacc.jjtree.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($r6);	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");	$i4 = (int) c2;	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");	$r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();	$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);	$r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"");	$r17 = staticinvoke <org.javacc.jjtree.TokenMgrError: java.lang.String addEscapes(java.lang.String)>(r16);	$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);	$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");	$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();	return $r21
;block_num 3