(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var3697 0)
(declare-sort var2452 0)
(declare-sort var1892 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun getLine/-753183392 (var3697) Int)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun getColumn/1743199486 (var3697) Int)
(declare-fun var2452_identityHashCode/1096208673 (var1892) Int)
(declare-fun cast-from-var3697-to-var1892 (var3697) var1892)
(declare-fun getSimpleName/675546153 (var3697) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-var3697 var3697)
(declare-const var2585 var3697) ; Statement: r1 := @this: org.javacc.parser.Expansion 
(assert (not (= var2585 null-var3697)))
(define-const var1856 String String-init) ; Statement: $r0 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1856)) ; Statement: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1856!1 String)
(assert (= var1856!1 ""))
(assert true)
(define-const var3760 String (append/672562846 var1856!1 "[")) ; Statement: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") 
(declare-const var1856!2 String)
(assert (= var1856!2 (str.++ var1856!1 "[")))
(assert true)
(define-const var1561 Int (getLine/-753183392 var2585)) ; Statement: $i0 = virtualinvoke r1.<org.javacc.parser.Expansion: int getLine()>() 
(assert true)
(define-const var1684 String (append/-1001720160 var3760 var1561)) ; Statement: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) 
(declare-const var3760!1 String)
(assert (str.prefixof var3760 var3760!1))
(assert true)
(define-const var1036 String (append/672562846 var1684 ",")) ; Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") 
(declare-const var1684!1 String)
(assert (= var1684!1 (str.++ var1684 ",")))
(assert true)
(define-const var2555 Int (getColumn/1743199486 var2585)) ; Statement: $i1 = virtualinvoke r1.<org.javacc.parser.Expansion: int getColumn()>() 
(assert true)
(define-const var3628 String (append/-1001720160 var1036 var2555)) ; Statement: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) 
(declare-const var1036!1 String)
(assert (str.prefixof var1036 var1036!1))
(assert true)
(define-const var2236 String (append/672562846 var3628 " ")) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") 
(declare-const var3628!1 String)
(assert (= var3628!1 (str.++ var3628 " ")))
(define-const var3640 Int (var2452_identityHashCode/1096208673 (cast-from-var3697-to-var1892 var2585))) ; Statement: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1) 
(assert true)
(define-const var1274 String (append/-1001720160 var2236 var3640)) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) 
(declare-const var2236!1 String)
(assert (str.prefixof var2236 var2236!1))
(assert true)
(define-const var3391 String (append/672562846 var1274 " ")) ; Statement: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") 
(declare-const var1274!1 String)
(assert (= var1274!1 (str.++ var1274 " ")))
(assert true)
(define-const var1126 String (getSimpleName/675546153 var2585)) ; Statement: $r8 = specialinvoke r1.<org.javacc.parser.Expansion: java.lang.String getSimpleName()>() 
(assert true)
(define-const var2947 String (append/672562846 var3391 var1126)) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) 
(declare-const var3391!1 String)
(assert (= var3391!1 (str.++ var3391 var1126)))
(assert true)
(define-const var3010 String (append/672562846 var2947 "]")) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") 
(declare-const var2947!1 String)
(assert (= var2947!1 (str.++ var2947 "]")))
(assert true)
(define-const var1967 String (toString/-2075883882 var3010)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r12 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), getLine/-753183392=([org.javacc.parser.Expansion], int), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), getColumn/1743199486=([org.javacc.parser.Expansion], int), var2452_identityHashCode/1096208673=([java.lang.Object], int), cast-from-var3697-to-var1892=([org.javacc.parser.Expansion], java.lang.Object), getSimpleName/675546153=([org.javacc.parser.Expansion], java.lang.String), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var3697=org.javacc.parser.Expansion, var2585=r1, var1856=$r0, var3760=$r2, var1561=$i0, var1684=$r3, var1036=$r4, var2555=$i1, var3628=$r5, var2236=$r6, var2452=java.lang.System, var1892=java.lang.Object, var3640=$i2, var1274=$r7, var3391=$r9, var1126=$r8, var2947=$r10, var3010=$r11, var1967=$r12}
; {org.javacc.parser.Expansion=var3697, r1=var2585, $r0=var1856, $r2=var3760, $i0=var1561, $r3=var1684, $r4=var1036, $i1=var2555, $r5=var3628, $r6=var2236, java.lang.System=var2452, java.lang.Object=var1892, $i2=var3640, $r7=var1274, $r9=var3391, $r8=var1126, $r10=var2947, $r11=var3010, $r12=var1967}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 6,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 3,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r1 := @this: org.javacc.parser.Expansion;	$r0 = new java.lang.StringBuilder;	specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();	$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");	$i0 = virtualinvoke r1.<org.javacc.parser.Expansion: int getLine()>();	$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);	$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");	$i1 = virtualinvoke r1.<org.javacc.parser.Expansion: int getColumn()>();	$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");	$i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);	$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");	$r8 = specialinvoke r1.<org.javacc.parser.Expansion: java.lang.String getSimpleName()>();	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();	return $r12
;block_num 1