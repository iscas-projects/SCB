(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1609 0)
(declare-sort var2494 0)
(declare-sort var2660 0)
(declare-sort var2871 0)
(declare-sort var1168 0)
(declare-sort var2469 0)
(declare-sort var2659 0)
(declare-sort var2359 0)
(declare-sort var1339 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var2660_getDatabase/193995574 (var2660) var1168)
(declare-fun getJdbcEnvironment/-2057911686 (var1168) var2469)
(declare-fun getTable/-2097669385 (var2494) var2659)
(declare-fun getQualifiedTableName/-853736433 (var2659) var2359)
(declare-fun var2871_format/1204537082 (var2871 var2359) String)
(declare-fun var1339_getDialect/1656342179 () var1339)
(declare-fun qualifyIndexName/1384883955 (var1339) Bool)
(declare-fun getName/-354198463 (var2494) String)
(declare-fun String-init () String)
(define-fun <init>/-1061048412 ((s String)) String s)
(declare-fun getColumnIterator/504997087 (var2494) Iterator)
(declare-fun Iterator_hasNext/-1669924200 (Iterator) Bool)
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(define-fun <init>/1968657023 () String "")
(declare-fun append/-1166366385 (String Int) String)
(define-fun append/-13659068 ((s String) (tail String)) String (str.++ s tail))
(define-fun cast-from-String-to-String ((arg String)) String arg)
(declare-fun arr-String-init () (Array Int String))
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-var1609 var1609)
(declare-const null-var2494 var2494)
(declare-const null-var2660 var2660)
(declare-const null-var2871 var2871)
(declare-const null-__Array__Int__String__ (Array Int String))
(declare-const var2398 var1609) ; Statement: r32 := @this: org.hibernate.dialect.Teradata14Dialect$TeradataIndexExporter 
(assert (not (= var2398 null-var1609)))
(declare-const var3730 var2494) ; Statement: r4 := @parameter0: org.hibernate.mapping.Index 
(assert (not (= var3730 null-var2494)))
(declare-const var149 var2660) ; Statement: r0 := @parameter1: org.hibernate.boot.Metadata 
(assert (not (= var149 null-var2660)))
(declare-const var34 var2871) ; Statement: r3 := @parameter2: org.hibernate.boot.model.relational.SqlStringGenerationContext 
(assert (not (= var34 null-var2871)))
(define-const var3437 var1168 (var2660_getDatabase/193995574 var149)) ; Statement: $r1 = interfaceinvoke r0.<org.hibernate.boot.Metadata: org.hibernate.boot.model.relational.Database getDatabase()>() 
(assert true)
(define-const var503 var2469 (getJdbcEnvironment/-2057911686 var3437)) ; Statement: r2 = virtualinvoke $r1.<org.hibernate.boot.model.relational.Database: org.hibernate.engine.jdbc.env.spi.JdbcEnvironment getJdbcEnvironment()>() 
(assert true)
(define-const var3420 var2659 (getTable/-2097669385 var3730)) ; Statement: $r5 = virtualinvoke r4.<org.hibernate.mapping.Index: org.hibernate.mapping.Table getTable()>() 
(assert true)
(define-const var752 var2359 (getQualifiedTableName/-853736433 var3420)) ; Statement: $r6 = virtualinvoke $r5.<org.hibernate.mapping.Table: org.hibernate.boot.model.relational.QualifiedTableName getQualifiedTableName()>() 
(define-const var1979 String (var2871_format/1204537082 var34 var752)) ; Statement: r7 = interfaceinvoke r3.<org.hibernate.boot.model.relational.SqlStringGenerationContext: java.lang.String format(org.hibernate.boot.model.relational.QualifiedTableName)>($r6) 
(define-const var3540 var1339 var1339_getDialect/1656342179) ; Statement: $r8 = staticinvoke <org.hibernate.dialect.Dialect: org.hibernate.dialect.Dialect getDialect()>() 
(assert true)
(define-const var1708 Bool (qualifyIndexName/1384883955 var3540)) ; Statement: $z0 = virtualinvoke $r8.<org.hibernate.dialect.Dialect: boolean qualifyIndexName()>() 
 ; Statement: if $z0 == 0 goto r33 = virtualinvoke r4.<org.hibernate.mapping.Index: java.lang.String getName()>() 
(assert (= (ite var1708 1 0) 0)) ; Cond: $z0 == 0 
(assert true)
(define-const var2453 String (getName/-354198463 var3730)) ; Statement: r33 = virtualinvoke r4.<org.hibernate.mapping.Index: java.lang.String getName()>() 
(assert true) ; Non Conditional
(define-const var1967 String String-init) ; Statement: $r9 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/-1061048412 var1967 "")) ; Statement: specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("") 
(declare-const var1967!1 String)
(assert (= var1967!1 ""))
(define-const var1477 Bool (ite (= 1 1) true false)) ; Statement: z1 = 1 
(assert true)
(define-const var1734 Iterator (getColumnIterator/504997087 var3730)) ; Statement: $r31 = virtualinvoke r4.<org.hibernate.mapping.Index: java.util.Iterator getColumnIterator()>() 
(assert true) ; Non Conditional
(define-const var845 Bool (Iterator_hasNext/-1669924200 var1734)) ; Statement: $z2 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>() 
 ; Statement: if $z2 == 0 goto virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") 
(assert (= (ite var845 1 0) 0)) ; Cond: $z2 == 0 
(assert true)
;(assert (append/672562846 var1967!1 ")")) ; Statement: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") 
(declare-const var1967!2 String)
(assert (= var1967!2 (str.++ var1967!1 ")")))
(define-const var1802 String String-init) ; Statement: $r10 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1802)) ; Statement: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1802!1 String)
(assert (= var1802!1 ""))
(assert true)
(define-const var1733 String (append/672562846 var1802!1 "create index ")) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create index ") 
(declare-const var1802!2 String)
(assert (= var1802!2 (str.++ var1802!1 "create index ")))
(assert true)
(define-const var287 String (append/672562846 var1733 var2453)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33) 
(declare-const var1733!1 String)
(assert (= var1733!1 (str.++ var1733 var2453)))
(assert true)
(define-const var1341 String (append/-1166366385 var287 40)) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40) 
(declare-const var287!1 String)
(assert (str.prefixof var287 var287!1))
(assert true)
(define-const var143 String (append/-13659068 var1341 (cast-from-String-to-String var1967!2))) ; Statement: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r9) 
(declare-const var1341!1 String)
(assert (str.prefixof var1341 var1341!1))
(assert true)
(define-const var2708 String (append/672562846 var143 " on ")) ; Statement: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ") 
(declare-const var143!1 String)
(assert (= var143!1 (str.++ var143 " on ")))
(assert true)
(define-const var1574 String (append/672562846 var2708 var1979)) ; Statement: r35 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) 
(declare-const var2708!1 String)
(assert (= var2708!1 (str.++ var2708 var1979)))
(define-const var2593 (Array Int String) arr-String-init) ; Statement: $r16 = newarray (java.lang.String)[1] 
(assert true)
(define-const var2417 String (toString/-2075883882 var1574)) ; Statement: $r17 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>() 
(declare-const var2593!1 (Array Int String))
(assert (not (= var2593!1 null-__Array__Int__String__)))
(assert (= (select var2593!1 0) var2417)) ; Statement: $r16[0] = $r17 
 ; Statement: return $r16 
(check-sat)
(get-model)
(get-unsat-core)
; {var2660_getDatabase/193995574=([org.hibernate.boot.Metadata], org.hibernate.boot.model.relational.Database), getJdbcEnvironment/-2057911686=([org.hibernate.boot.model.relational.Database], org.hibernate.engine.jdbc.env.spi.JdbcEnvironment), getTable/-2097669385=([org.hibernate.mapping.Index], org.hibernate.mapping.Table), getQualifiedTableName/-853736433=([org.hibernate.mapping.Table], org.hibernate.boot.model.relational.QualifiedTableName), var2871_format/1204537082=([org.hibernate.boot.model.relational.SqlStringGenerationContext, org.hibernate.boot.model.relational.QualifiedTableName], java.lang.String), var1339_getDialect/1656342179=([], org.hibernate.dialect.Dialect), qualifyIndexName/1384883955=([org.hibernate.dialect.Dialect], boolean), getName/-354198463=([org.hibernate.mapping.Index], java.lang.String), String-init=([], java.lang.StringBuilder), <init>/-1061048412=([java.lang.StringBuilder, java.lang.String], void), getColumnIterator/504997087=([org.hibernate.mapping.Index], java.util.Iterator), Iterator_hasNext/-1669924200=([java.util.Iterator], boolean), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/-1166366385=([java.lang.StringBuilder, char], java.lang.StringBuilder), append/-13659068=([java.lang.StringBuilder, java.lang.CharSequence], java.lang.StringBuilder), cast-from-String-to-String=([java.lang.StringBuilder], java.lang.CharSequence), arr-String-init=([], java.lang.String[]), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var1609=org.hibernate.dialect.Teradata14Dialect$TeradataIndexExporter, var2398=r32, var2494=org.hibernate.mapping.Index, var3730=r4, var2660=org.hibernate.boot.Metadata, var149=r0, var2871=org.hibernate.boot.model.relational.SqlStringGenerationContext, var34=r3, var1168=org.hibernate.boot.model.relational.Database, var3437=$r1, var2469=org.hibernate.engine.jdbc.env.spi.JdbcEnvironment, var503=r2, var2659=org.hibernate.mapping.Table, var3420=$r5, var2359=org.hibernate.boot.model.relational.QualifiedTableName, var752=$r6, var1979=r7, var1339=org.hibernate.dialect.Dialect, var3540=$r8, var1708=$z0, var2453=r33, var1967=$r9, var1477=z1, var1734=$r31, var845=$z2, var1802=$r10, var1733=$r11, var287=$r12, var1341=$r13, var143=$r14, var2708=$r15, var1574=r35, var2593=$r16, var2417=$r17}
; {org.hibernate.dialect.Teradata14Dialect$TeradataIndexExporter=var1609, r32=var2398, org.hibernate.mapping.Index=var2494, r4=var3730, org.hibernate.boot.Metadata=var2660, r0=var149, org.hibernate.boot.model.relational.SqlStringGenerationContext=var2871, r3=var34, org.hibernate.boot.model.relational.Database=var1168, $r1=var3437, org.hibernate.engine.jdbc.env.spi.JdbcEnvironment=var2469, r2=var503, org.hibernate.mapping.Table=var2659, $r5=var3420, org.hibernate.boot.model.relational.QualifiedTableName=var2359, $r6=var752, r7=var1979, org.hibernate.dialect.Dialect=var1339, $r8=var3540, $z0=var1708, r33=var2453, $r9=var1967, z1=var1477, $r31=var1734, $z2=var845, $r10=var1802, $r11=var1733, $r12=var287, $r13=var1341, $r14=var143, $r15=var2708, r35=var1574, $r16=var2593, $r17=var2417}
;seq <java.lang.StringBuilder: void <init>(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>(java.lang.String)>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 5,"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r32 := @this: org.hibernate.dialect.Teradata14Dialect$TeradataIndexExporter;	r4 := @parameter0: org.hibernate.mapping.Index;	r0 := @parameter1: org.hibernate.boot.Metadata;	r3 := @parameter2: org.hibernate.boot.model.relational.SqlStringGenerationContext;	$r1 = interfaceinvoke r0.<org.hibernate.boot.Metadata: org.hibernate.boot.model.relational.Database getDatabase()>();	r2 = virtualinvoke $r1.<org.hibernate.boot.model.relational.Database: org.hibernate.engine.jdbc.env.spi.JdbcEnvironment getJdbcEnvironment()>();	$r5 = virtualinvoke r4.<org.hibernate.mapping.Index: org.hibernate.mapping.Table getTable()>();	$r6 = virtualinvoke $r5.<org.hibernate.mapping.Table: org.hibernate.boot.model.relational.QualifiedTableName getQualifiedTableName()>();	r7 = interfaceinvoke r3.<org.hibernate.boot.model.relational.SqlStringGenerationContext: java.lang.String format(org.hibernate.boot.model.relational.QualifiedTableName)>($r6);	$r8 = staticinvoke <org.hibernate.dialect.Dialect: org.hibernate.dialect.Dialect getDialect()>();	$z0 = virtualinvoke $r8.<org.hibernate.dialect.Dialect: boolean qualifyIndexName()>();	if $z0 == 0 goto r33 = virtualinvoke r4.<org.hibernate.mapping.Index: java.lang.String getName()>();	r33 = virtualinvoke r4.<org.hibernate.mapping.Index: java.lang.String getName()>();	$r9 = new java.lang.StringBuilder;	specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("");	z1 = 1;	$r31 = virtualinvoke r4.<org.hibernate.mapping.Index: java.util.Iterator getColumnIterator()>();	$z2 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();	if $z2 == 0 goto virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");	virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");	$r10 = new java.lang.StringBuilder;	specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create index ");	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);	$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r9);	$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");	r35 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);	$r16 = newarray (java.lang.String)[1];	$r17 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();	$r16[0] = $r17;	return $r16
;block_num 5