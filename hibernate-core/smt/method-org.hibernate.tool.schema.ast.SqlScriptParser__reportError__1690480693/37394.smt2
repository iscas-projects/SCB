(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var2849 0)
(declare-sort var3524 0)
(declare-sort var2085 0)
(declare-sort var1957 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun getLine/1694120831 (var3524) Int)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun getColumn/-39520419 (var3524) Int)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-fun toString/-1635891983 (var3524) String)
(define-fun contains/1009244746 ((s String) (subs String)) Bool (str.contains s subs))
(define-fun cast-from-String-to-String ((arg String)) String arg)
(declare-fun errorList/1569206351 (var2849) var2085)
(declare-fun var2085_add/328494887 (var2085 var1957) Bool)
(declare-fun cast-from-String-to-var1957 (String) var1957)
(declare-const null-var2849 var2849)
(declare-const null-var3524 var3524)
(declare-const var3180 var2849) ; Statement: r8 := @this: org.hibernate.tool.schema.ast.SqlScriptParser 
(assert (not (= var3180 null-var2849)))
(declare-const var1664 var3524) ; Statement: r1 := @parameter0: antlr.RecognitionException 
(assert (not (= var1664 null-var3524)))
(define-const var2714 String String-init) ; Statement: $r0 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var2714)) ; Statement: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() 
(declare-const var2714!1 String)
(assert (= var2714!1 ""))
(assert true)
(define-const var2568 String (append/672562846 var2714!1 "RecognitionException(@")) ; Statement: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecognitionException(@") 
(declare-const var2714!2 String)
(assert (= var2714!2 (str.++ var2714!1 "RecognitionException(@")))
(assert true)
(define-const var2919 Int (getLine/1694120831 var1664)) ; Statement: $i0 = virtualinvoke r1.<antlr.RecognitionException: int getLine()>() 
(assert true)
(define-const var3778 String (append/-1001720160 var2568 var2919)) ; Statement: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) 
(declare-const var2568!1 String)
(assert (str.prefixof var2568 var2568!1))
(assert true)
(define-const var3401 String (append/672562846 var3778 ":")) ; Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") 
(declare-const var3778!1 String)
(assert (= var3778!1 (str.++ var3778 ":")))
(assert true)
(define-const var1887 Int (getColumn/-39520419 var1664)) ; Statement: $i1 = virtualinvoke r1.<antlr.RecognitionException: int getColumn()>() 
(assert true)
(define-const var1375 String (append/-1001720160 var3401 var1887)) ; Statement: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) 
(declare-const var3401!1 String)
(assert (str.prefixof var3401 var3401!1))
(assert true)
(define-const var921 String (append/672562846 var1375 ")")) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") 
(declare-const var1375!1 String)
(assert (= var1375!1 (str.++ var1375 ")")))
(assert true)
(define-const var732 String (toString/-2075883882 var921)) ; Statement: r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
(define-const var1281 String (toString/-1635891983 var1664)) ; Statement: r15 = virtualinvoke r1.<antlr.RecognitionException: java.lang.String toString()>() 
(assert true)
(define-const var2059 Bool (contains/1009244746 var1281 (cast-from-String-to-String "expecting DELIMITER"))) ; Statement: $z0 = virtualinvoke r15.<java.lang.String: boolean contains(java.lang.CharSequence)>("expecting DELIMITER") 
 ; Statement: if $z0 == 0 goto $r10 = r8.<org.hibernate.tool.schema.ast.SqlScriptParser: java.util.List errorList> 
(assert (= (ite var2059 1 0) 0)) ; Cond: $z0 == 0 
(define-const var1305 var2085 (errorList/1569206351 var3180)) ; Statement: $r10 = r8.<org.hibernate.tool.schema.ast.SqlScriptParser: java.util.List errorList> 
(define-const var255 String String-init) ; Statement: $r9 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var255)) ; Statement: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() 
(declare-const var255!1 String)
(assert (= var255!1 ""))
(assert true)
(define-const var2531 String (append/672562846 var255!1 var732)) ; Statement: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) 
(declare-const var255!2 String)
(assert (= var255!2 (str.++ var255!1 var732)))
(assert true)
(define-const var2090 String (append/672562846 var2531 " : ")) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ") 
(declare-const var2531!1 String)
(assert (= var2531!1 (str.++ var2531 " : ")))
(assert true)
(define-const var2220 String (append/672562846 var2090 var1281)) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15) 
(declare-const var2090!1 String)
(assert (= var2090!1 (str.++ var2090 var1281)))
(assert true)
(define-const var1831 String (toString/-2075883882 var2220)) ; Statement: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() 
;(assert (var2085_add/328494887 var1305 (cast-from-String-to-var1957 var1831))) ; Statement: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14) 

(declare-const var1305!1 var2085)
(declare-const var1831!1 String)
 ; Statement: return 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), getLine/1694120831=([antlr.RecognitionException], int), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), getColumn/-39520419=([antlr.RecognitionException], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String), toString/-1635891983=([antlr.RecognitionException], java.lang.String), contains/1009244746=([java.lang.String, java.lang.CharSequence], boolean), cast-from-String-to-String=([java.lang.String], java.lang.CharSequence), errorList/1569206351=([org.hibernate.tool.schema.ast.SqlScriptParser], java.util.List), var2085_add/328494887=([java.util.List, java.lang.Object], boolean), cast-from-String-to-var1957=([java.lang.String], java.lang.Object)}
; {var2849=org.hibernate.tool.schema.ast.SqlScriptParser, var3180=r8, var3524=antlr.RecognitionException, var1664=r1, var2714=$r0, var2568=$r2, var2919=$i0, var3778=$r3, var3401=$r4, var1887=$i1, var1375=$r5, var921=$r6, var732=r7, var1281=r15, var2059=$z0, var2085=java.util.List, var1305=$r10, var255=$r9, var2531=$r11, var2090=$r12, var2220=$r13, var1831=$r14, var1957=java.lang.Object}
; {org.hibernate.tool.schema.ast.SqlScriptParser=var2849, r8=var3180, antlr.RecognitionException=var3524, r1=var1664, $r0=var2714, $r2=var2568, $i0=var2919, $r3=var3778, $r4=var3401, $i1=var1887, $r5=var1375, $r6=var921, r7=var732, r15=var1281, $z0=var2059, java.util.List=var2085, $r10=var1305, $r9=var255, $r11=var2531, $r12=var2090, $r13=var2220, $r14=var1831, java.lang.Object=var1957}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<antlr.RecognitionException: java.lang.String toString()>;	<java.lang.String: boolean contains(java.lang.CharSequence)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 6,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 2,"<java.lang.StringBuilder: java.lang.String toString()>": 2,"<java.lang.String: boolean contains(java.lang.CharSequence)>": 1}
;stmts r8 := @this: org.hibernate.tool.schema.ast.SqlScriptParser;	r1 := @parameter0: antlr.RecognitionException;	$r0 = new java.lang.StringBuilder;	specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();	$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecognitionException(@");	$i0 = virtualinvoke r1.<antlr.RecognitionException: int getLine()>();	$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);	$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");	$i1 = virtualinvoke r1.<antlr.RecognitionException: int getColumn()>();	$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");	r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();	r15 = virtualinvoke r1.<antlr.RecognitionException: java.lang.String toString()>();	$z0 = virtualinvoke r15.<java.lang.String: boolean contains(java.lang.CharSequence)>("expecting DELIMITER");	if $z0 == 0 goto $r10 = r8.<org.hibernate.tool.schema.ast.SqlScriptParser: java.util.List errorList>;	$r10 = r8.<org.hibernate.tool.schema.ast.SqlScriptParser: java.util.List errorList>;	$r9 = new java.lang.StringBuilder;	specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();	$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);	$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();	interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14);	return
;block_num 2