(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1766 0)
(declare-sort var489 0)
(declare-sort var3287 0)
(declare-sort var1199 0)
(declare-sort var2688 0)
(declare-sort var2631 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun hashCode/-467973558 (String) Int)
(declare-fun var3287-init () var3287)
(declare-fun var1199-init () var1199)
(declare-fun <init>/-720687200 (var1199) void)
(declare-fun <init>/-1269958905 (var3287 String var2688 var2631) void)
(declare-fun cast-from-var1199-to-var2631 (var1199) var2631)
(declare-const null-var1766 var1766)
(declare-const null-String String)
(declare-const null-ClassObject ClassObject)
(declare-const null-NullType var489)
(declare-const null-var2688 var2688)
(declare-const var3203 var1766) ; Statement: r11 := @this: com.alibaba.fastjson2.writer.ObjectWriterBaseModule 
(assert (not (= var3203 null-var1766)))
(declare-const var3177 String) ; Statement: r0 := @parameter0: java.lang.String 
(assert (not (= var3177 null-String)))
(declare-const var3534 ClassObject) ; Statement: r3 := @parameter1: java.lang.Class 
(assert (not (= var3534 null-ClassObject)))
(define-const var2307 Int (- 1)) ; Statement: b1 = -1 
(assert true)
(define-const var1726 Int (hashCode/-467973558 var3177)) ; Statement: $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>() 
 ; Statement: lookupswitch($i0) {     case -1922416486: goto $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.LocalDate");     case -1658359406: goto $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.chrono.GregorianChronology");     case 1088242009: goto $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("java.sql.Time");     case 1195998065: goto $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.chrono.ISOChronology");     case 1215440026: goto $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.DateTime");     case 1252880906: goto $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("java.sql.Timestamp");     case 1458317959: goto $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.LocalDateTime");     default: goto tableswitch(b1) {     case 0: goto $r9 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimeWriter(java.lang.String)>(null);     case 1: goto $r8 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimestampWriter(java.lang.Class,java.lang.String)>(r3, null);     case 2: goto $r7 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createGregorianChronologyWriter(java.lang.Class)>(r3);     case 3: goto $r6 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createISOChronologyWriter(java.lang.Class)>(r3);     case 4: goto $r5 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateWriter(java.lang.Class,java.lang.String)>(r3, null);     case 5: goto $r4 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateTimeWriter(java.lang.Class,java.lang.String)>(r3, null);     case 6: goto $r1 = new com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime;     default: goto $z1 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: boolean isClob(java.lang.Class)>(r3); }; } 
(assert (and (not (= var1726 1458317959)) (and (not (= var1726 1252880906)) (and (not (= var1726 1215440026)) (and (not (= var1726 1195998065)) (and (not (= var1726 1088242009)) (and (not (= var1726 (- 1658359406))) (and (not (= var1726 (- 1922416486))) true)))))))) ; Intersect: Negate: Cond: $i0 == 1458317959   and Intersect: Negate: Cond: $i0 == 1252880906   and Intersect: Negate: Cond: $i0 == 1215440026   and Intersect: Negate: Cond: $i0 == 1195998065   and Intersect: Negate: Cond: $i0 == 1088242009   and Intersect: Negate: Cond: $i0 == -1658359406   and Intersect: Negate: Cond: $i0 == -1922416486   and Non Conditional       
 ; Statement: tableswitch(b1) {     case 0: goto $r9 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimeWriter(java.lang.String)>(null);     case 1: goto $r8 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimestampWriter(java.lang.Class,java.lang.String)>(r3, null);     case 2: goto $r7 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createGregorianChronologyWriter(java.lang.Class)>(r3);     case 3: goto $r6 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createISOChronologyWriter(java.lang.Class)>(r3);     case 4: goto $r5 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateWriter(java.lang.Class,java.lang.String)>(r3, null);     case 5: goto $r4 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateTimeWriter(java.lang.Class,java.lang.String)>(r3, null);     case 6: goto $r1 = new com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime;     default: goto $z1 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: boolean isClob(java.lang.Class)>(r3); } 
(assert (and (= var2307 6) (and (not (= var2307 5)) (and (not (= var2307 4)) (and (not (= var2307 3)) (and (not (= var2307 2)) (and (not (= var2307 1)) (and (not (= var2307 0)) true)))))))) ; Intersect: Cond: b1 == 6  and Intersect: Negate: Cond: b1 == 5   and Intersect: Negate: Cond: b1 == 4   and Intersect: Negate: Cond: b1 == 3   and Intersect: Negate: Cond: b1 == 2   and Intersect: Negate: Cond: b1 == 1   and Intersect: Negate: Cond: b1 == 0   and Non Conditional       
(define-const var3323 var3287 var3287-init) ; Statement: $r1 = new com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime 
(define-const var2143 var1199 var1199-init) ; Statement: $r2 = new com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT 
(assert true)
;(assert (<init>/-720687200 var2143)) ; Statement: specialinvoke $r2.<com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT: void <init>()>() 

(declare-const var2143!1 var1199)
(assert true)
;(assert (<init>/-1269958905 var3323 null-String null-var2688 (cast-from-var1199-to-var2631 var2143!1))) ; Statement: specialinvoke $r1.<com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime: void <init>(java.lang.String,java.util.Locale,java.util.function.Function)>(null, null, $r2) 

(declare-const var3323!1 var3287)
(declare-const var2020 var489)
(declare-const var2020!1 var489)
(declare-const var2143!2 var1199)
 ; Statement: return $r1 
(check-sat)
(get-model)
(get-unsat-core)
; {hashCode/-467973558=([java.lang.String], int), var3287-init=([], com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime), var1199-init=([], com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT), <init>/-720687200=([com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT], void), <init>/-1269958905=([com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime, java.lang.String, java.util.Locale, java.util.function.Function], void), cast-from-var1199-to-var2631=([com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT], java.util.function.Function)}
; {var1766=com.alibaba.fastjson2.writer.ObjectWriterBaseModule, var3203=r11, var3177=r0, var489=null_type, var3534=r3, var2307=b1, var1726=$i0, var3287=com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime, var3323=$r1, var1199=com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT, var2143=$r2, var2688=java.util.Locale, var2631=java.util.function.Function, var2020=null}
; {com.alibaba.fastjson2.writer.ObjectWriterBaseModule=var1766, r11=var3203, r0=var3177, null_type=var489, r3=var3534, b1=var2307, $i0=var1726, com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime=var3287, $r1=var3323, com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT=var1199, $r2=var2143, java.util.Locale=var2688, java.util.function.Function=var2631, null=var2020}
;seq <java.lang.String: int hashCode()>
;cnt {"<java.lang.String: int hashCode()>": 1}
;stmts r11 := @this: com.alibaba.fastjson2.writer.ObjectWriterBaseModule;	r0 := @parameter0: java.lang.String;	r3 := @parameter1: java.lang.Class;	b1 = -1;	$i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();	lookupswitch($i0) {     case -1922416486: goto $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.LocalDate");     case -1658359406: goto $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.chrono.GregorianChronology");     case 1088242009: goto $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("java.sql.Time");     case 1195998065: goto $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.chrono.ISOChronology");     case 1215440026: goto $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.DateTime");     case 1252880906: goto $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("java.sql.Timestamp");     case 1458317959: goto $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.joda.time.LocalDateTime");     default: goto tableswitch(b1) {     case 0: goto $r9 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimeWriter(java.lang.String)>(null);     case 1: goto $r8 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimestampWriter(java.lang.Class,java.lang.String)>(r3, null);     case 2: goto $r7 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createGregorianChronologyWriter(java.lang.Class)>(r3);     case 3: goto $r6 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createISOChronologyWriter(java.lang.Class)>(r3);     case 4: goto $r5 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateWriter(java.lang.Class,java.lang.String)>(r3, null);     case 5: goto $r4 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateTimeWriter(java.lang.Class,java.lang.String)>(r3, null);     case 6: goto $r1 = new com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime;     default: goto $z1 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: boolean isClob(java.lang.Class)>(r3); }; };	tableswitch(b1) {     case 0: goto $r9 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimeWriter(java.lang.String)>(null);     case 1: goto $r8 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: com.alibaba.fastjson2.writer.ObjectWriter createTimestampWriter(java.lang.Class,java.lang.String)>(r3, null);     case 2: goto $r7 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createGregorianChronologyWriter(java.lang.Class)>(r3);     case 3: goto $r6 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createISOChronologyWriter(java.lang.Class)>(r3);     case 4: goto $r5 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateWriter(java.lang.Class,java.lang.String)>(r3, null);     case 5: goto $r4 = staticinvoke <com.alibaba.fastjson2.util.JodaSupport: com.alibaba.fastjson2.writer.ObjectWriter createLocalDateTimeWriter(java.lang.Class,java.lang.String)>(r3, null);     case 6: goto $r1 = new com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime;     default: goto $z1 = staticinvoke <com.alibaba.fastjson2.util.JdbcSupport: boolean isClob(java.lang.Class)>(r3); };	$r1 = new com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime;	$r2 = new com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT;	specialinvoke $r2.<com.alibaba.fastjson2.util.JodaSupport$DateTime2ZDT: void <init>()>();	specialinvoke $r1.<com.alibaba.fastjson2.writer.ObjectWriterImplZonedDateTime: void <init>(java.lang.String,java.util.Locale,java.util.function.Function)>(null, null, $r2);	return $r1
;block_num 3