(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun Int_toString/1350422511 (Int) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-Int Int)
(declare-const var3457 Int) ; Statement: b0 := @parameter0: byte 
(assert (not (= var3457 null-Int)))
(define-const var1162 Int (cast-from-Int-to-Int var3457)) ; Statement: $i1 = (int) b0 
 ; Statement: lookupswitch($i1) {     case -111: goto $r206 = new java.lang.StringBuilder;     case -110: goto $r214 = new java.lang.StringBuilder;     case -109: goto $r188 = new java.lang.StringBuilder;     case -91: goto $r187 = new java.lang.StringBuilder;     case -90: goto $r186 = new java.lang.StringBuilder;     case -89: goto $r205 = new java.lang.StringBuilder;     case -88: goto $r207 = new java.lang.StringBuilder;     case -87: goto $r213 = new java.lang.StringBuilder;     case -86: goto $r212 = new java.lang.StringBuilder;     case -85: goto $r211 = new java.lang.StringBuilder;     case -84: goto $r210 = new java.lang.StringBuilder;     case -83: goto $r209 = new java.lang.StringBuilder;     case -82: goto $r208 = new java.lang.StringBuilder;     case -81: goto $r190 = new java.lang.StringBuilder;     case -80: goto $r192 = new java.lang.StringBuilder;     case -79: goto $r191 = new java.lang.StringBuilder;     case -78: goto $r202 = new java.lang.StringBuilder;     case -77: goto $r202 = new java.lang.StringBuilder;     case -76: goto $r202 = new java.lang.StringBuilder;     case -75: goto $r202 = new java.lang.StringBuilder;     case -74: goto $r201 = new java.lang.StringBuilder;     case -73: goto $r201 = new java.lang.StringBuilder;     case -72: goto $r204 = new java.lang.StringBuilder;     case -71: goto $r204 = new java.lang.StringBuilder;     case -70: goto $r203 = new java.lang.StringBuilder;     case -69: goto $r203 = new java.lang.StringBuilder;     case -68: goto $r198 = new java.lang.StringBuilder;     case -67: goto $r197 = new java.lang.StringBuilder;     case -66: goto $r200 = new java.lang.StringBuilder;     case -65: goto $r200 = new java.lang.StringBuilder;     case 72: goto $r199 = new java.lang.StringBuilder;     case 122: goto $r193 = new java.lang.StringBuilder;     case 123: goto $r194 = new java.lang.StringBuilder;     case 124: goto $r195 = new java.lang.StringBuilder;     case 125: goto $r196 = new java.lang.StringBuilder;     case 127: goto $r189 = new java.lang.StringBuilder;     default: goto $i31 = (int) b0; } 
(assert (and (= var1162 125) (and (not (= var1162 124)) (and (not (= var1162 123)) (and (not (= var1162 122)) (and (not (= var1162 72)) (and (not (= var1162 (- 65))) (and (not (= var1162 (- 66))) (and (not (= var1162 (- 67))) (and (not (= var1162 (- 68))) (and (not (= var1162 (- 69))) (and (not (= var1162 (- 70))) (and (not (= var1162 (- 71))) (and (not (= var1162 (- 72))) (and (not (= var1162 (- 73))) (and (not (= var1162 (- 74))) (and (not (= var1162 (- 75))) (and (not (= var1162 (- 76))) (and (not (= var1162 (- 77))) (and (not (= var1162 (- 78))) (and (not (= var1162 (- 79))) (and (not (= var1162 (- 80))) (and (not (= var1162 (- 81))) (and (not (= var1162 (- 82))) (and (not (= var1162 (- 83))) (and (not (= var1162 (- 84))) (and (not (= var1162 (- 85))) (and (not (= var1162 (- 86))) (and (not (= var1162 (- 87))) (and (not (= var1162 (- 88))) (and (not (= var1162 (- 89))) (and (not (= var1162 (- 90))) (and (not (= var1162 (- 91))) (and (not (= var1162 (- 109))) (and (not (= var1162 (- 110))) (and (not (= var1162 (- 111))) true)))))))))))))))))))))))))))))))))))) ; Intersect: Cond: $i1 == 125  and Intersect: Negate: Cond: $i1 == 124   and Intersect: Negate: Cond: $i1 == 123   and Intersect: Negate: Cond: $i1 == 122   and Intersect: Negate: Cond: $i1 == 72   and Intersect: Negate: Cond: $i1 == -65   and Intersect: Negate: Cond: $i1 == -66   and Intersect: Negate: Cond: $i1 == -67   and Intersect: Negate: Cond: $i1 == -68   and Intersect: Negate: Cond: $i1 == -69   and Intersect: Negate: Cond: $i1 == -70   and Intersect: Negate: Cond: $i1 == -71   and Intersect: Negate: Cond: $i1 == -72   and Intersect: Negate: Cond: $i1 == -73   and Intersect: Negate: Cond: $i1 == -74   and Intersect: Negate: Cond: $i1 == -75   and Intersect: Negate: Cond: $i1 == -76   and Intersect: Negate: Cond: $i1 == -77   and Intersect: Negate: Cond: $i1 == -78   and Intersect: Negate: Cond: $i1 == -79   and Intersect: Negate: Cond: $i1 == -80   and Intersect: Negate: Cond: $i1 == -81   and Intersect: Negate: Cond: $i1 == -82   and Intersect: Negate: Cond: $i1 == -83   and Intersect: Negate: Cond: $i1 == -84   and Intersect: Negate: Cond: $i1 == -85   and Intersect: Negate: Cond: $i1 == -86   and Intersect: Negate: Cond: $i1 == -87   and Intersect: Negate: Cond: $i1 == -88   and Intersect: Negate: Cond: $i1 == -89   and Intersect: Negate: Cond: $i1 == -90   and Intersect: Negate: Cond: $i1 == -91   and Intersect: Negate: Cond: $i1 == -109   and Intersect: Negate: Cond: $i1 == -110   and Intersect: Negate: Cond: $i1 == -111   and Non Conditional                                   
(define-const var60 String String-init) ; Statement: $r196 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var60)) ; Statement: specialinvoke $r196.<java.lang.StringBuilder: void <init>()>() 
(declare-const var60!1 String)
(assert (= var60!1 ""))
(assert true)
(define-const var904 String (append/672562846 var60!1 "STR_UTF16BE ")) ; Statement: $r7 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("STR_UTF16BE ") 
(declare-const var60!2 String)
(assert (= var60!2 (str.++ var60!1 "STR_UTF16BE ")))
(define-const var2500 Int (cast-from-Int-to-Int var3457)) ; Statement: $i12 = (int) b0 
(define-const var3164 String (Int_toString/1350422511 var2500)) ; Statement: $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12) 
(assert true)
(define-const var3612 String (append/672562846 var904 var3164)) ; Statement: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) 
(declare-const var904!1 String)
(assert (= var904!1 (str.++ var904 var3164)))
(assert true)
(define-const var801 String (toString/-2075883882 var3612)) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r9 
(check-sat)
(get-model)
(get-unsat-core)
; {cast-from-Int-to-Int=([byte], int), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), Int_toString/1350422511=([int], java.lang.String), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var3457=b0, var1162=$i1, var60=$r196, var904=$r7, var2500=$i12, var3164=$r6, var3612=$r8, var801=$r9}
; {b0=var3457, $i1=var1162, $r196=var60, $r7=var904, $i12=var2500, $r6=var3164, $r8=var3612, $r9=var801}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.Integer: java.lang.String toString(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 2,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts b0 := @parameter0: byte;	$i1 = (int) b0;	lookupswitch($i1) {     case -111: goto $r206 = new java.lang.StringBuilder;     case -110: goto $r214 = new java.lang.StringBuilder;     case -109: goto $r188 = new java.lang.StringBuilder;     case -91: goto $r187 = new java.lang.StringBuilder;     case -90: goto $r186 = new java.lang.StringBuilder;     case -89: goto $r205 = new java.lang.StringBuilder;     case -88: goto $r207 = new java.lang.StringBuilder;     case -87: goto $r213 = new java.lang.StringBuilder;     case -86: goto $r212 = new java.lang.StringBuilder;     case -85: goto $r211 = new java.lang.StringBuilder;     case -84: goto $r210 = new java.lang.StringBuilder;     case -83: goto $r209 = new java.lang.StringBuilder;     case -82: goto $r208 = new java.lang.StringBuilder;     case -81: goto $r190 = new java.lang.StringBuilder;     case -80: goto $r192 = new java.lang.StringBuilder;     case -79: goto $r191 = new java.lang.StringBuilder;     case -78: goto $r202 = new java.lang.StringBuilder;     case -77: goto $r202 = new java.lang.StringBuilder;     case -76: goto $r202 = new java.lang.StringBuilder;     case -75: goto $r202 = new java.lang.StringBuilder;     case -74: goto $r201 = new java.lang.StringBuilder;     case -73: goto $r201 = new java.lang.StringBuilder;     case -72: goto $r204 = new java.lang.StringBuilder;     case -71: goto $r204 = new java.lang.StringBuilder;     case -70: goto $r203 = new java.lang.StringBuilder;     case -69: goto $r203 = new java.lang.StringBuilder;     case -68: goto $r198 = new java.lang.StringBuilder;     case -67: goto $r197 = new java.lang.StringBuilder;     case -66: goto $r200 = new java.lang.StringBuilder;     case -65: goto $r200 = new java.lang.StringBuilder;     case 72: goto $r199 = new java.lang.StringBuilder;     case 122: goto $r193 = new java.lang.StringBuilder;     case 123: goto $r194 = new java.lang.StringBuilder;     case 124: goto $r195 = new java.lang.StringBuilder;     case 125: goto $r196 = new java.lang.StringBuilder;     case 127: goto $r189 = new java.lang.StringBuilder;     default: goto $i31 = (int) b0; };	$r196 = new java.lang.StringBuilder;	specialinvoke $r196.<java.lang.StringBuilder: void <init>()>();	$r7 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("STR_UTF16BE ");	$i12 = (int) b0;	$r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12);	$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();	return $r9
;block_num 2