(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1223 0)
(declare-sort var2851 0)
(declare-sort var1887 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun channel/720164270 (var1223) Int)
(declare-fun getText/1815794653 (var1223) String)
(define-fun replace/2138489945 ((s String) (old String) (new String)) String (str.replace_all s old new))
(define-fun cast-from-String-to-String ((arg String)) String arg)
(declare-fun type/720164270 (var1223) Int)
(declare-fun String_valueOf/1240665136 (Int) String)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun getTokenIndex/-1726466217 (var1223) Int)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun start/720164270 (var1223) Int)
(declare-fun stop/720164270 (var1223) Int)
(declare-fun line/720164270 (var1223) Int)
(declare-fun getCharPositionInLine/716061720 (var1223) Int)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-var1223 var1223)
(declare-const null-var2851 var2851)
(declare-const null-String String)
(declare-const var2060 var1223) ; Statement: r0 := @this: com.github.jknack.handlebars.internal.antlr.CommonToken 
(assert (not (= var2060 null-var1223)))
(declare-const var3101 var2851) ; Statement: r1 := @parameter0: com.github.jknack.handlebars.internal.antlr.Recognizer 
(assert (not (= var3101 null-var2851)))
(define-const var3001 String "") ; Statement: r26 = "" 
(define-const var961 Int (channel/720164270 var2060)) ; Statement: $i0 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int channel> 
 ; Statement: if $i0 <= 0 goto $r25 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: java.lang.String getText()>() 
(assert (<= var961 0)) ; Cond: $i0 <= 0 
(assert true)
(define-const var3123 String (getText/1815794653 var2060)) ; Statement: $r25 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: java.lang.String getText()>() 
 ; Statement: if $r25 == null goto r29 = "<no text>" 
(assert (not (= var3123 null-String))) ; Negate: Cond: $r25 == null  
(assert true)
(define-const var3676 String (replace/2138489945 var3123 (cast-from-String-to-String "\n") (cast-from-String-to-String "\u005cn"))) ; Statement: r27 = virtualinvoke $r25.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n") 
(assert true)
(define-const var2136 String (replace/2138489945 var3676 (cast-from-String-to-String "\r") (cast-from-String-to-String "\u005cr"))) ; Statement: r28 = virtualinvoke r27.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\r", "\\r") 
(assert true)
(define-const var2556 String (replace/2138489945 var2136 (cast-from-String-to-String "\t") (cast-from-String-to-String "\u005ct"))) ; Statement: r29 = virtualinvoke r28.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\t", "\\t") 
 ; Statement: goto [?= $i1 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int type>] 
(assert true) ; Non Conditional
(define-const var3646 Int (type/720164270 var2060)) ; Statement: $i1 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int type> 
(define-const var1695 String (String_valueOf/1240665136 var3646)) ; Statement: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1) 
 ; Statement: if r1 == null goto $r2 = new java.lang.StringBuilder 
(assert (= var3101 null-var2851)) ; Cond: r1 == null 
(define-const var63 String String-init) ; Statement: $r2 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var63)) ; Statement: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() 
(declare-const var63!1 String)
(assert (= var63!1 ""))
(assert true)
(define-const var3190 String (append/672562846 var63!1 "[@")) ; Statement: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[@") 
(declare-const var63!2 String)
(assert (= var63!2 (str.++ var63!1 "[@")))
(assert true)
(define-const var1166 Int (getTokenIndex/-1726466217 var2060)) ; Statement: $i2 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int getTokenIndex()>() 
(assert true)
(define-const var1135 String (append/-1001720160 var3190 var1166)) ; Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) 
(declare-const var3190!1 String)
(assert (str.prefixof var3190 var3190!1))
(assert true)
(define-const var335 String (append/672562846 var1135 ",")) ; Statement: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") 
(declare-const var1135!1 String)
(assert (= var1135!1 (str.++ var1135 ",")))
(define-const var2802 Int (start/720164270 var2060)) ; Statement: $i3 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int start> 
(assert true)
(define-const var3567 String (append/-1001720160 var335 var2802)) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3) 
(declare-const var335!1 String)
(assert (str.prefixof var335 var335!1))
(assert true)
(define-const var1172 String (append/672562846 var3567 ":")) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") 
(declare-const var3567!1 String)
(assert (= var3567!1 (str.++ var3567 ":")))
(define-const var3193 Int (stop/720164270 var2060)) ; Statement: $i4 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int stop> 
(assert true)
(define-const var3670 String (append/-1001720160 var1172 var3193)) ; Statement: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) 
(declare-const var1172!1 String)
(assert (str.prefixof var1172 var1172!1))
(assert true)
(define-const var213 String (append/672562846 var3670 "=\u0027")) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'") 
(declare-const var3670!1 String)
(assert (= var3670!1 (str.++ var3670 "=\u0027")))
(assert true)
(define-const var1566 String (append/672562846 var213 var2556)) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29) 
(declare-const var213!1 String)
(assert (= var213!1 (str.++ var213 var2556)))
(assert true)
(define-const var3332 String (append/672562846 var1566 "\u0027,<")) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\',<") 
(declare-const var1566!1 String)
(assert (= var1566!1 (str.++ var1566 "\u0027,<")))
(assert true)
(define-const var1936 String (append/672562846 var3332 var1695)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) 
(declare-const var3332!1 String)
(assert (= var3332!1 (str.++ var3332 var1695)))
(assert true)
(define-const var1911 String (append/672562846 var1936 ">")) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") 
(declare-const var1936!1 String)
(assert (= var1936!1 (str.++ var1936 ">")))
(assert true)
(define-const var3548 String (append/672562846 var1911 var3001)) ; Statement: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26) 
(declare-const var1911!1 String)
(assert (= var1911!1 (str.++ var1911 var3001)))
(assert true)
(define-const var823 String (append/672562846 var3548 ",")) ; Statement: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") 
(declare-const var3548!1 String)
(assert (= var3548!1 (str.++ var3548 ",")))
(define-const var735 Int (line/720164270 var2060)) ; Statement: $i5 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int line> 
(assert true)
(define-const var2318 String (append/-1001720160 var823 var735)) ; Statement: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) 
(declare-const var823!1 String)
(assert (str.prefixof var823 var823!1))
(assert true)
(define-const var1898 String (append/672562846 var2318 ":")) ; Statement: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") 
(declare-const var2318!1 String)
(assert (= var2318!1 (str.++ var2318 ":")))
(assert true)
(define-const var3814 Int (getCharPositionInLine/716061720 var2060)) ; Statement: $i6 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int getCharPositionInLine()>() 
(assert true)
(define-const var113 String (append/-1001720160 var1898 var3814)) ; Statement: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6) 
(declare-const var1898!1 String)
(assert (str.prefixof var1898 var1898!1))
(assert true)
(define-const var2649 String (append/672562846 var113 "]")) ; Statement: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") 
(declare-const var113!1 String)
(assert (= var113!1 (str.++ var113 "]")))
(assert true)
(define-const var2376 String (toString/-2075883882 var2649)) ; Statement: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r20 
(check-sat)
(get-model)
(get-unsat-core)
; {channel/720164270=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), getText/1815794653=([com.github.jknack.handlebars.internal.antlr.CommonToken], java.lang.String), replace/2138489945=([java.lang.String, java.lang.CharSequence, java.lang.CharSequence], java.lang.String), cast-from-String-to-String=([java.lang.String], java.lang.CharSequence), type/720164270=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), String_valueOf/1240665136=([int], java.lang.String), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), getTokenIndex/-1726466217=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), start/720164270=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), stop/720164270=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), line/720164270=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), getCharPositionInLine/716061720=([com.github.jknack.handlebars.internal.antlr.CommonToken], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var1223=com.github.jknack.handlebars.internal.antlr.CommonToken, var2060=r0, var2851=com.github.jknack.handlebars.internal.antlr.Recognizer, var3101=r1, var3001=r26, var961=$i0, var3123=$r25, var1887=null_type, var3676=r27, var2136=r28, var2556=r29, var3646=$i1, var1695=r30, var63=$r2, var3190=$r3, var1166=$i2, var1135=$r4, var335=$r5, var2802=$i3, var3567=$r6, var1172=$r7, var3193=$i4, var3670=$r8, var213=$r9, var1566=$r10, var3332=$r11, var1936=$r12, var1911=$r13, var3548=$r14, var823=$r15, var735=$i5, var2318=$r16, var1898=$r17, var3814=$i6, var113=$r18, var2649=$r19, var2376=$r20}
; {com.github.jknack.handlebars.internal.antlr.CommonToken=var1223, r0=var2060, com.github.jknack.handlebars.internal.antlr.Recognizer=var2851, r1=var3101, r26=var3001, $i0=var961, $r25=var3123, null_type=var1887, r27=var3676, r28=var2136, r29=var2556, $i1=var3646, r30=var1695, $r2=var63, $r3=var3190, $i2=var1166, $r4=var1135, $r5=var335, $i3=var2802, $r6=var3567, $r7=var1172, $i4=var3193, $r8=var3670, $r9=var213, $r10=var1566, $r11=var3332, $r12=var1936, $r13=var1911, $r14=var3548, $r15=var823, $i5=var735, $r16=var2318, $r17=var1898, $i6=var3814, $r18=var113, $r19=var2649, $r20=var2376}
;seq <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>;	<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>;	<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>;	<java.lang.String: java.lang.String valueOf(int)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>": 3,"<java.lang.String: java.lang.String valueOf(int)>": 1,"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 12,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 5,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r0 := @this: com.github.jknack.handlebars.internal.antlr.CommonToken;	r1 := @parameter0: com.github.jknack.handlebars.internal.antlr.Recognizer;	r26 = "";	$i0 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int channel>;	if $i0 <= 0 goto $r25 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: java.lang.String getText()>();	$r25 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: java.lang.String getText()>();	if $r25 == null goto r29 = "<no text>";	r27 = virtualinvoke $r25.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n");	r28 = virtualinvoke r27.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\r", "\\r");	r29 = virtualinvoke r28.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\t", "\\t");	goto [?= $i1 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int type>];	$i1 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int type>;	r30 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);	if r1 == null goto $r2 = new java.lang.StringBuilder;	$r2 = new java.lang.StringBuilder;	specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();	$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[@");	$i2 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int getTokenIndex()>();	$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);	$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");	$i3 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int start>;	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");	$i4 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int stop>;	$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\',<");	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");	$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);	$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");	$i5 = r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int line>;	$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);	$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");	$i6 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.CommonToken: int getCharPositionInLine()>();	$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);	$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");	$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();	return $r20
;block_num 5