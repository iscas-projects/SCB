(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1911 0)
(declare-sort var2621 0)
(declare-sort var2733 0)
(declare-sort var787 0)
(declare-sort var2209 0)
(declare-sort var2446 0)
(declare-sort var3108 0)
(declare-sort var10 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun inErrorRecoveryMode/-1165588427 (var1911 var2621) Bool)
(declare-fun beginErrorCondition/-1889106416 (var1911 var2621) void)
(declare-fun getCurrentToken/-1939156433 (var2621) var2733)
(declare-fun getTokenErrorDisplay/398744226 (var1911 var2733) String)
(declare-fun getExpectedTokens/-787020131 (var1911 var2621) var787)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun getVocabulary/1387097077 (var2446) var2209)
(declare-fun cast-from-var2621-to-var2446 (var2621) var2446)
(declare-fun toString/-1252666215 (var787 var2209) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-fun notifyErrorListeners/-935134556 (var2621 var2733 String var3108) void)
(declare-const null-var1911 var1911)
(declare-const null-var2621 var2621)
(declare-const null-NullType var10)
(declare-const null-var3108 var3108)
(declare-const var1215 var1911) ; Statement: r0 := @this: com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy 
(assert (not (= var1215 null-var1911)))
(declare-const var3980 var2621) ; Statement: r1 := @parameter0: com.github.jknack.handlebars.internal.antlr.Parser 
(assert (not (= var3980 null-var2621)))
(assert true)
(define-const var2531 Bool (inErrorRecoveryMode/-1165588427 var1215 var3980)) ; Statement: $z0 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: boolean inErrorRecoveryMode(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 
 ; Statement: if $z0 == 0 goto virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 
(assert (= (ite var2531 1 0) 0)) ; Cond: $z0 == 0 
(assert true)
;(assert (beginErrorCondition/-1889106416 var1215 var3980)) ; Statement: virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 

(declare-const var1215!1 var1911)
(declare-const var3980!1 var2621)
(assert true)
(define-const var3547 var2733 (getCurrentToken/-1939156433 var3980!1)) ; Statement: r2 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Token getCurrentToken()>() 
(assert true)
(define-const var1852 String (getTokenErrorDisplay/398744226 var1215!1 var3547)) ; Statement: r3 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: java.lang.String getTokenErrorDisplay(com.github.jknack.handlebars.internal.antlr.Token)>(r2) 
(assert true)
(define-const var1177 var787 (getExpectedTokens/-787020131 var1215!1 var3980!1)) ; Statement: r4 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: com.github.jknack.handlebars.internal.antlr.misc.IntervalSet getExpectedTokens(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 
(define-const var3683 String String-init) ; Statement: $r5 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var3683)) ; Statement: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() 
(declare-const var3683!1 String)
(assert (= var3683!1 ""))
(assert true)
(define-const var3966 String (append/672562846 var3683!1 "extraneous input ")) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extraneous input ") 
(declare-const var3683!2 String)
(assert (= var3683!2 (str.++ var3683!1 "extraneous input ")))
(assert true)
(define-const var3654 String (append/672562846 var3966 var1852)) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) 
(declare-const var3966!1 String)
(assert (= var3966!1 (str.++ var3966 var1852)))
(assert true)
(define-const var3481 String (append/672562846 var3654 " expecting ")) ; Statement: $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expecting ") 
(declare-const var3654!1 String)
(assert (= var3654!1 (str.++ var3654 " expecting ")))
(assert true)
(define-const var3201 var2209 (getVocabulary/1387097077 (cast-from-var2621-to-var2446 var3980!1))) ; Statement: $r8 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Vocabulary getVocabulary()>() 
(assert true)
(define-const var1528 String (toString/-1252666215 var1177 var3201)) ; Statement: $r9 = virtualinvoke r4.<com.github.jknack.handlebars.internal.antlr.misc.IntervalSet: java.lang.String toString(com.github.jknack.handlebars.internal.antlr.Vocabulary)>($r8) 
(assert true)
(define-const var1081 String (append/672562846 var3481 var1528)) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) 
(declare-const var3481!1 String)
(assert (= var3481!1 (str.++ var3481 var1528)))
(assert true)
(define-const var563 String (toString/-2075883882 var1081)) ; Statement: r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (notifyErrorListeners/-935134556 var3980!1 var3547 var563 null-var3108)) ; Statement: virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: void notifyErrorListeners(com.github.jknack.handlebars.internal.antlr.Token,java.lang.String,com.github.jknack.handlebars.internal.antlr.RecognitionException)>(r2, r12, null) 

(declare-const var3980!2 var2621)
(declare-const var3547!1 var2733)
(declare-const var563!1 String)
(declare-const var1278 var10)
 ; Statement: return 
(check-sat)
(get-model)
(get-unsat-core)
; {inErrorRecoveryMode/-1165588427=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Parser], boolean), beginErrorCondition/-1889106416=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Parser], void), getCurrentToken/-1939156433=([com.github.jknack.handlebars.internal.antlr.Parser], com.github.jknack.handlebars.internal.antlr.Token), getTokenErrorDisplay/398744226=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Token], java.lang.String), getExpectedTokens/-787020131=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Parser], com.github.jknack.handlebars.internal.antlr.misc.IntervalSet), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), getVocabulary/1387097077=([com.github.jknack.handlebars.internal.antlr.Recognizer], com.github.jknack.handlebars.internal.antlr.Vocabulary), cast-from-var2621-to-var2446=([com.github.jknack.handlebars.internal.antlr.Parser], com.github.jknack.handlebars.internal.antlr.Recognizer), toString/-1252666215=([com.github.jknack.handlebars.internal.antlr.misc.IntervalSet, com.github.jknack.handlebars.internal.antlr.Vocabulary], java.lang.String), toString/-2075883882=([java.lang.StringBuilder], java.lang.String), notifyErrorListeners/-935134556=([com.github.jknack.handlebars.internal.antlr.Parser, com.github.jknack.handlebars.internal.antlr.Token, java.lang.String, com.github.jknack.handlebars.internal.antlr.RecognitionException], void)}
; {var1911=com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, var1215=r0, var2621=com.github.jknack.handlebars.internal.antlr.Parser, var3980=r1, var2531=$z0, var2733=com.github.jknack.handlebars.internal.antlr.Token, var3547=r2, var1852=r3, var787=com.github.jknack.handlebars.internal.antlr.misc.IntervalSet, var1177=r4, var3683=$r5, var3966=$r6, var3654=$r7, var3481=$r10, var2209=com.github.jknack.handlebars.internal.antlr.Vocabulary, var2446=com.github.jknack.handlebars.internal.antlr.Recognizer, var3201=$r8, var1528=$r9, var1081=$r11, var563=r12, var3108=com.github.jknack.handlebars.internal.antlr.RecognitionException, var1278=null, var10=null_type}
; {com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy=var1911, r0=var1215, com.github.jknack.handlebars.internal.antlr.Parser=var2621, r1=var3980, $z0=var2531, com.github.jknack.handlebars.internal.antlr.Token=var2733, r2=var3547, r3=var1852, com.github.jknack.handlebars.internal.antlr.misc.IntervalSet=var787, r4=var1177, $r5=var3683, $r6=var3966, $r7=var3654, $r10=var3481, com.github.jknack.handlebars.internal.antlr.Vocabulary=var2209, com.github.jknack.handlebars.internal.antlr.Recognizer=var2446, $r8=var3201, $r9=var1528, $r11=var1081, r12=var563, com.github.jknack.handlebars.internal.antlr.RecognitionException=var3108, null=var1278, null_type=var10}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<com.github.jknack.handlebars.internal.antlr.misc.IntervalSet: java.lang.String toString(com.github.jknack.handlebars.internal.antlr.Vocabulary)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 4,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r0 := @this: com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy;	r1 := @parameter0: com.github.jknack.handlebars.internal.antlr.Parser;	$z0 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: boolean inErrorRecoveryMode(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	if $z0 == 0 goto virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	r2 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Token getCurrentToken()>();	r3 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: java.lang.String getTokenErrorDisplay(com.github.jknack.handlebars.internal.antlr.Token)>(r2);	r4 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: com.github.jknack.handlebars.internal.antlr.misc.IntervalSet getExpectedTokens(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	$r5 = new java.lang.StringBuilder;	specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extraneous input ");	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);	$r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expecting ");	$r8 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Vocabulary getVocabulary()>();	$r9 = virtualinvoke r4.<com.github.jknack.handlebars.internal.antlr.misc.IntervalSet: java.lang.String toString(com.github.jknack.handlebars.internal.antlr.Vocabulary)>($r8);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);	r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: void notifyErrorListeners(com.github.jknack.handlebars.internal.antlr.Token,java.lang.String,com.github.jknack.handlebars.internal.antlr.RecognitionException)>(r2, r12, null);	return
;block_num 2