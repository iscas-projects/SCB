(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var750 0)
(declare-sort var467 0)
(declare-sort var3647 0)
(declare-sort var2422 0)
(declare-sort var2452 0)
(declare-sort var3287 0)
(declare-sort var3076 0)
(declare-sort var3490 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun inErrorRecoveryMode/-1165588427 (var750 var467) Bool)
(declare-fun beginErrorCondition/-1889106416 (var750 var467) void)
(declare-fun getCurrentToken/-1939156433 (var467) var3647)
(declare-fun getExpectedTokens/-787020131 (var750 var467) var2422)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun getVocabulary/1387097077 (var3287) var2452)
(declare-fun cast-from-var467-to-var3287 (var467) var3287)
(declare-fun toString/-1252666215 (var2422 var2452) String)
(declare-fun getTokenErrorDisplay/398744226 (var750 var3647) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-fun notifyErrorListeners/-935134556 (var467 var3647 String var3076) void)
(declare-const null-var750 var750)
(declare-const null-var467 var467)
(declare-const null-NullType var3490)
(declare-const null-var3076 var3076)
(declare-const var3551 var750) ; Statement: r0 := @this: com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy 
(assert (not (= var3551 null-var750)))
(declare-const var1872 var467) ; Statement: r1 := @parameter0: com.github.jknack.handlebars.internal.antlr.Parser 
(assert (not (= var1872 null-var467)))
(assert true)
(define-const var2358 Bool (inErrorRecoveryMode/-1165588427 var3551 var1872)) ; Statement: $z0 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: boolean inErrorRecoveryMode(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 
 ; Statement: if $z0 == 0 goto virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 
(assert (= (ite var2358 1 0) 0)) ; Cond: $z0 == 0 
(assert true)
;(assert (beginErrorCondition/-1889106416 var3551 var1872)) ; Statement: virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 

(declare-const var3551!1 var750)
(declare-const var1872!1 var467)
(assert true)
(define-const var520 var3647 (getCurrentToken/-1939156433 var1872!1)) ; Statement: r2 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Token getCurrentToken()>() 
(assert true)
(define-const var1467 var2422 (getExpectedTokens/-787020131 var3551!1 var1872!1)) ; Statement: r3 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: com.github.jknack.handlebars.internal.antlr.misc.IntervalSet getExpectedTokens(com.github.jknack.handlebars.internal.antlr.Parser)>(r1) 
(define-const var1134 String String-init) ; Statement: $r4 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1134)) ; Statement: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1134!1 String)
(assert (= var1134!1 ""))
(assert true)
(define-const var11 String (append/672562846 var1134!1 "missing ")) ; Statement: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing ") 
(declare-const var1134!2 String)
(assert (= var1134!2 (str.++ var1134!1 "missing ")))
(assert true)
(define-const var2190 var2452 (getVocabulary/1387097077 (cast-from-var467-to-var3287 var1872!1))) ; Statement: $r5 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Vocabulary getVocabulary()>() 
(assert true)
(define-const var1308 String (toString/-1252666215 var1467 var2190)) ; Statement: $r6 = virtualinvoke r3.<com.github.jknack.handlebars.internal.antlr.misc.IntervalSet: java.lang.String toString(com.github.jknack.handlebars.internal.antlr.Vocabulary)>($r5) 
(assert true)
(define-const var2350 String (append/672562846 var11 var1308)) ; Statement: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) 
(declare-const var11!1 String)
(assert (= var11!1 (str.++ var11 var1308)))
(assert true)
(define-const var986 String (append/672562846 var2350 " at ")) ; Statement: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ") 
(declare-const var2350!1 String)
(assert (= var2350!1 (str.++ var2350 " at ")))
(assert true)
(define-const var1504 String (getTokenErrorDisplay/398744226 var3551!1 var520)) ; Statement: $r9 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: java.lang.String getTokenErrorDisplay(com.github.jknack.handlebars.internal.antlr.Token)>(r2) 
(assert true)
(define-const var3013 String (append/672562846 var986 var1504)) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) 
(declare-const var986!1 String)
(assert (= var986!1 (str.++ var986 var1504)))
(assert true)
(define-const var766 String (toString/-2075883882 var3013)) ; Statement: r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (notifyErrorListeners/-935134556 var1872!1 var520 var766 null-var3076)) ; Statement: virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: void notifyErrorListeners(com.github.jknack.handlebars.internal.antlr.Token,java.lang.String,com.github.jknack.handlebars.internal.antlr.RecognitionException)>(r2, r12, null) 

(declare-const var1872!2 var467)
(declare-const var520!1 var3647)
(declare-const var766!1 String)
(declare-const var1135 var3490)
 ; Statement: return 
(check-sat)
(get-model)
(get-unsat-core)
; {inErrorRecoveryMode/-1165588427=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Parser], boolean), beginErrorCondition/-1889106416=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Parser], void), getCurrentToken/-1939156433=([com.github.jknack.handlebars.internal.antlr.Parser], com.github.jknack.handlebars.internal.antlr.Token), getExpectedTokens/-787020131=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Parser], com.github.jknack.handlebars.internal.antlr.misc.IntervalSet), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), getVocabulary/1387097077=([com.github.jknack.handlebars.internal.antlr.Recognizer], com.github.jknack.handlebars.internal.antlr.Vocabulary), cast-from-var467-to-var3287=([com.github.jknack.handlebars.internal.antlr.Parser], com.github.jknack.handlebars.internal.antlr.Recognizer), toString/-1252666215=([com.github.jknack.handlebars.internal.antlr.misc.IntervalSet, com.github.jknack.handlebars.internal.antlr.Vocabulary], java.lang.String), getTokenErrorDisplay/398744226=([com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, com.github.jknack.handlebars.internal.antlr.Token], java.lang.String), toString/-2075883882=([java.lang.StringBuilder], java.lang.String), notifyErrorListeners/-935134556=([com.github.jknack.handlebars.internal.antlr.Parser, com.github.jknack.handlebars.internal.antlr.Token, java.lang.String, com.github.jknack.handlebars.internal.antlr.RecognitionException], void)}
; {var750=com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy, var3551=r0, var467=com.github.jknack.handlebars.internal.antlr.Parser, var1872=r1, var2358=$z0, var3647=com.github.jknack.handlebars.internal.antlr.Token, var520=r2, var2422=com.github.jknack.handlebars.internal.antlr.misc.IntervalSet, var1467=r3, var1134=$r4, var11=$r7, var2452=com.github.jknack.handlebars.internal.antlr.Vocabulary, var3287=com.github.jknack.handlebars.internal.antlr.Recognizer, var2190=$r5, var1308=$r6, var2350=$r8, var986=$r10, var1504=$r9, var3013=$r11, var766=r12, var3076=com.github.jknack.handlebars.internal.antlr.RecognitionException, var1135=null, var3490=null_type}
; {com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy=var750, r0=var3551, com.github.jknack.handlebars.internal.antlr.Parser=var467, r1=var1872, $z0=var2358, com.github.jknack.handlebars.internal.antlr.Token=var3647, r2=var520, com.github.jknack.handlebars.internal.antlr.misc.IntervalSet=var2422, r3=var1467, $r4=var1134, $r7=var11, com.github.jknack.handlebars.internal.antlr.Vocabulary=var2452, com.github.jknack.handlebars.internal.antlr.Recognizer=var3287, $r5=var2190, $r6=var1308, $r8=var2350, $r10=var986, $r9=var1504, $r11=var3013, r12=var766, com.github.jknack.handlebars.internal.antlr.RecognitionException=var3076, null=var1135, null_type=var3490}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<com.github.jknack.handlebars.internal.antlr.misc.IntervalSet: java.lang.String toString(com.github.jknack.handlebars.internal.antlr.Vocabulary)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 4,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r0 := @this: com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy;	r1 := @parameter0: com.github.jknack.handlebars.internal.antlr.Parser;	$z0 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: boolean inErrorRecoveryMode(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	if $z0 == 0 goto virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: void beginErrorCondition(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	r2 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Token getCurrentToken()>();	r3 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: com.github.jknack.handlebars.internal.antlr.misc.IntervalSet getExpectedTokens(com.github.jknack.handlebars.internal.antlr.Parser)>(r1);	$r4 = new java.lang.StringBuilder;	specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();	$r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing ");	$r5 = virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: com.github.jknack.handlebars.internal.antlr.Vocabulary getVocabulary()>();	$r6 = virtualinvoke r3.<com.github.jknack.handlebars.internal.antlr.misc.IntervalSet: java.lang.String toString(com.github.jknack.handlebars.internal.antlr.Vocabulary)>($r5);	$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);	$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");	$r9 = virtualinvoke r0.<com.github.jknack.handlebars.internal.antlr.DefaultErrorStrategy: java.lang.String getTokenErrorDisplay(com.github.jknack.handlebars.internal.antlr.Token)>(r2);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);	r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke r1.<com.github.jknack.handlebars.internal.antlr.Parser: void notifyErrorListeners(com.github.jknack.handlebars.internal.antlr.Token,java.lang.String,com.github.jknack.handlebars.internal.antlr.RecognitionException)>(r2, r12, null);	return
;block_num 2