(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var977 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(define-fun toString/-2075883882 ((s String)) String s)
(define-fun replace/2138489945 ((s String) (old String) (new String)) String (str.replace_all s old new))
(define-fun cast-from-String-to-String ((arg String)) String arg)
(declare-fun var977_compile/2141929305 (String) var977)
(define-const var717 String String-init) ; Statement: $r0 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var717)) ; Statement: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() 
(declare-const var717!1 String)
(assert (= var717!1 ""))
(assert true)
(define-const var3349 String (append/672562846 var717!1 "(?:\u005cd+#(?:\u005c.\u005cd*#)?|\u005c.\u005cd+#)")) ; Statement: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)") 
(declare-const var717!2 String)
(assert (= var717!2 (str.++ var717!1 "(?:\u005cd+#(?:\u005c.\u005cd*#)?|\u005c.\u005cd+#)")))
(assert true)
(define-const var2260 String (append/672562846 var3349 "(?:[eE][+-]?\u005cd+#)?[fFdD]?")) ; Statement: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[eE][+-]?\\d+#)?[fFdD]?") 
(declare-const var3349!1 String)
(assert (= var3349!1 (str.++ var3349 "(?:[eE][+-]?\u005cd+#)?[fFdD]?")))
(assert true)
(define-const var3963 String (toString/-2075883882 var2260)) ; Statement: r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() 
(define-const var837 String String-init) ; Statement: $r4 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var837)) ; Statement: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() 
(declare-const var837!1 String)
(assert (= var837!1 ""))
(assert true)
(define-const var2978 String (append/672562846 var837!1 "0[xX]")) ; Statement: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0[xX]") 
(declare-const var837!2 String)
(assert (= var837!2 (str.++ var837!1 "0[xX]")))
(assert true)
(define-const var2035 String (append/672562846 var2978 "(?:[0-9a-fA-F]+#(?:\u005c.[0-9a-fA-F]*#)?|\u005c.[0-9a-fA-F]+#)")) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)") 
(declare-const var2978!1 String)
(assert (= var2978!1 (str.++ var2978 "(?:[0-9a-fA-F]+#(?:\u005c.[0-9a-fA-F]*#)?|\u005c.[0-9a-fA-F]+#)")))
(assert true)
(define-const var2301 String (append/672562846 var2035 "[pP][+-]?\u005cd+#[fFdD]?")) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[pP][+-]?\\d+#[fFdD]?") 
(declare-const var2035!1 String)
(assert (= var2035!1 (str.++ var2035 "[pP][+-]?\u005cd+#[fFdD]?")))
(assert true)
(define-const var2727 String (toString/-2075883882 var2301)) ; Statement: r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() 
(define-const var1434 String String-init) ; Statement: $r9 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1434)) ; Statement: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1434!1 String)
(assert (= var1434!1 ""))
(assert true)
(define-const var3688 String (append/672562846 var1434!1 "[+-]?(?:NaN|Infinity|")) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[+-]?(?:NaN|Infinity|") 
(declare-const var1434!2 String)
(assert (= var1434!2 (str.++ var1434!1 "[+-]?(?:NaN|Infinity|")))
(assert true)
(define-const var1638 String (append/672562846 var3688 var3963)) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) 
(declare-const var3688!1 String)
(assert (= var3688!1 (str.++ var3688 var3963)))
(assert true)
(define-const var1392 String (append/672562846 var1638 "|")) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") 
(declare-const var1638!1 String)
(assert (= var1638!1 (str.++ var1638 "|")))
(assert true)
(define-const var3665 String (append/672562846 var1392 var2727)) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) 
(declare-const var1392!1 String)
(assert (= var1392!1 (str.++ var1392 var2727)))
(assert true)
(define-const var1863 String (append/672562846 var3665 ")")) ; Statement: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") 
(declare-const var3665!1 String)
(assert (= var3665!1 (str.++ var3665 ")")))
(assert true)
(define-const var3549 String (toString/-2075883882 var1863)) ; Statement: r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
(define-const var2193 String (replace/2138489945 var3549 (cast-from-String-to-String "#") (cast-from-String-to-String "+"))) ; Statement: r17 = virtualinvoke r16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "+") 
(define-const var216 var977 (var977_compile/2141929305 var2193)) ; Statement: $r15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r17) 
 ; Statement: return $r15 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), toString/-2075883882=([java.lang.StringBuilder], java.lang.String), replace/2138489945=([java.lang.String, java.lang.CharSequence, java.lang.CharSequence], java.lang.String), cast-from-String-to-String=([java.lang.String], java.lang.CharSequence), var977_compile/2141929305=([java.lang.String], java.util.regex.Pattern)}
; {var717=$r0, var3349=$r1, var2260=$r2, var3963=r3, var837=$r4, var2978=$r5, var2035=$r6, var2301=$r7, var2727=r8, var1434=$r9, var3688=$r10, var1638=$r11, var1392=$r12, var3665=$r13, var1863=$r14, var3549=r16, var2193=r17, var977=java.util.regex.Pattern, var216=$r15}
; {$r0=var717, $r1=var3349, $r2=var2260, r3=var3963, $r4=var837, $r5=var2978, $r6=var2035, $r7=var2301, r8=var2727, $r9=var1434, $r10=var3688, $r11=var1638, $r12=var1392, $r13=var3665, $r14=var1863, r16=var3549, r17=var2193, java.util.regex.Pattern=var977, $r15=var216}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
;cnt {"<java.lang.StringBuilder: void <init>()>": 3,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 10,"<java.lang.StringBuilder: java.lang.String toString()>": 3,"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>": 1}
;stmts $r0 = new java.lang.StringBuilder;	specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();	$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)");	$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[eE][+-]?\\d+#)?[fFdD]?");	r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();	$r4 = new java.lang.StringBuilder;	specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();	$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0[xX]");	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)");	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[pP][+-]?\\d+#[fFdD]?");	r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();	$r9 = new java.lang.StringBuilder;	specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[+-]?(?:NaN|Infinity|");	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);	$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");	r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();	r17 = virtualinvoke r16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "+");	$r15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r17);	return $r15
;block_num 1