(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var3966 0)
(declare-sort var718 0)
(declare-sort var2384 0)
(declare-sort var3837 0)
(declare-sort var2359 0)
(declare-sort var3047 0)
(declare-sort var1705 0)
(declare-sort var1173 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun lc/276435632 (var3837) var2384)
(declare-fun cast-from-var3966-to-var3837 (var3966) var3837)
(declare-fun cast-from-var2384-to-var2359 (var2384) var2359)
(declare-fun getCurrentFunction/-915359135 (var2384) var3047)
(declare-fun cast-from-var2359-to-var2384 (var2359) var2384)
(declare-fun getSource/118611882 (var3047) var1705)
(declare-fun position/-1564920413 (var1173) Int)
(declare-fun cast-from-var718-to-var1173 (var718) var1173)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(declare-fun getName/-243293101 (var1705) String)
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun append/-1166366385 (String Int) String)
(declare-fun getLine/-443705679 (var1705 Int) Int)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun getColumn/-594129837 (var1705 Int) Int)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-var3966 var3966)
(declare-const null-var718 var718)
(declare-const var3049 var3966) ; Statement: r0 := @this: jdk.nashorn.internal.codegen.Lower 
(assert (not (= var3049 null-var3966)))
(declare-const var14 var718) ; Statement: r5 := @parameter0: jdk.nashorn.internal.ir.IdentNode 
(assert (not (= var14 null-var718)))
(define-const var3425 var2384 (lc/276435632 (cast-from-var3966-to-var3837 var3049))) ; Statement: $r1 = r0.<jdk.nashorn.internal.codegen.Lower: jdk.nashorn.internal.ir.LexicalContext lc> 
(define-const var102 var2359 (cast-from-var2384-to-var2359 var3425)) ; Statement: $r2 = (jdk.nashorn.internal.ir.BlockLexicalContext) $r1 
(assert true)
(define-const var403 var3047 (getCurrentFunction/-915359135 (cast-from-var2359-to-var2384 var102))) ; Statement: $r3 = virtualinvoke $r2.<jdk.nashorn.internal.ir.BlockLexicalContext: jdk.nashorn.internal.ir.FunctionNode getCurrentFunction()>() 
(assert true)
(define-const var1534 var1705 (getSource/118611882 var403)) ; Statement: r4 = virtualinvoke $r3.<jdk.nashorn.internal.ir.FunctionNode: jdk.nashorn.internal.runtime.Source getSource()>() 
(assert true)
(define-const var551 Int (position/-1564920413 (cast-from-var718-to-var1173 var14))) ; Statement: i0 = virtualinvoke r5.<jdk.nashorn.internal.ir.IdentNode: int position()>() 
(define-const var3196 String String-init) ; Statement: $r6 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var3196)) ; Statement: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() 
(declare-const var3196!1 String)
(assert (= var3196!1 ""))
(assert true)
(define-const var1347 String (getName/-243293101 var1534)) ; Statement: $r7 = virtualinvoke r4.<jdk.nashorn.internal.runtime.Source: java.lang.String getName()>() 
(assert true)
(define-const var931 String (append/672562846 var3196!1 var1347)) ; Statement: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) 
(declare-const var3196!2 String)
(assert (= var3196!2 (str.++ var3196!1 var1347)))
(assert true)
(define-const var970 String (append/-1166366385 var931 35)) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35) 
(declare-const var931!1 String)
(assert (str.prefixof var931 var931!1))
(assert true)
(define-const var1148 Int (getLine/-443705679 var1534 var551)) ; Statement: $i1 = virtualinvoke r4.<jdk.nashorn.internal.runtime.Source: int getLine(int)>(i0) 
(assert true)
(define-const var1692 String (append/-1001720160 var970 var1148)) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) 
(declare-const var970!1 String)
(assert (str.prefixof var970 var970!1))
(assert true)
(define-const var2585 String (append/-1166366385 var1692 58)) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) 
(declare-const var1692!1 String)
(assert (str.prefixof var1692 var1692!1))
(assert true)
(define-const var3914 Int (getColumn/-594129837 var1534 var551)) ; Statement: $i2 = virtualinvoke r4.<jdk.nashorn.internal.runtime.Source: int getColumn(int)>(i0) 
(assert true)
(define-const var3098 String (append/-1001720160 var2585 var3914)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) 
(declare-const var2585!1 String)
(assert (str.prefixof var2585 var2585!1))
(assert true)
(define-const var3759 String (append/672562846 var3098 "<eval>")) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<eval>") 
(declare-const var3098!1 String)
(assert (= var3098!1 (str.++ var3098 "<eval>")))
(assert true)
(define-const var3907 String (toString/-2075883882 var3759)) ; Statement: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r14 
(check-sat)
(get-model)
(get-unsat-core)
; {lc/276435632=([jdk.nashorn.internal.ir.visitor.NodeVisitor], jdk.nashorn.internal.ir.LexicalContext), cast-from-var3966-to-var3837=([jdk.nashorn.internal.codegen.Lower], jdk.nashorn.internal.ir.visitor.NodeVisitor), cast-from-var2384-to-var2359=([jdk.nashorn.internal.ir.LexicalContext], jdk.nashorn.internal.ir.BlockLexicalContext), getCurrentFunction/-915359135=([jdk.nashorn.internal.ir.LexicalContext], jdk.nashorn.internal.ir.FunctionNode), cast-from-var2359-to-var2384=([jdk.nashorn.internal.ir.BlockLexicalContext], jdk.nashorn.internal.ir.LexicalContext), getSource/118611882=([jdk.nashorn.internal.ir.FunctionNode], jdk.nashorn.internal.runtime.Source), position/-1564920413=([jdk.nashorn.internal.ir.Node], int), cast-from-var718-to-var1173=([jdk.nashorn.internal.ir.IdentNode], jdk.nashorn.internal.ir.Node), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), getName/-243293101=([jdk.nashorn.internal.runtime.Source], java.lang.String), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), append/-1166366385=([java.lang.StringBuilder, char], java.lang.StringBuilder), getLine/-443705679=([jdk.nashorn.internal.runtime.Source, int], int), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), getColumn/-594129837=([jdk.nashorn.internal.runtime.Source, int], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var3966=jdk.nashorn.internal.codegen.Lower, var3049=r0, var718=jdk.nashorn.internal.ir.IdentNode, var14=r5, var2384=jdk.nashorn.internal.ir.LexicalContext, var3837=jdk.nashorn.internal.ir.visitor.NodeVisitor, var3425=$r1, var2359=jdk.nashorn.internal.ir.BlockLexicalContext, var102=$r2, var3047=jdk.nashorn.internal.ir.FunctionNode, var403=$r3, var1705=jdk.nashorn.internal.runtime.Source, var1534=r4, var1173=jdk.nashorn.internal.ir.Node, var551=i0, var3196=$r6, var1347=$r7, var931=$r8, var970=$r9, var1148=$i1, var1692=$r10, var2585=$r11, var3914=$i2, var3098=$r12, var3759=$r13, var3907=$r14}
; {jdk.nashorn.internal.codegen.Lower=var3966, r0=var3049, jdk.nashorn.internal.ir.IdentNode=var718, r5=var14, jdk.nashorn.internal.ir.LexicalContext=var2384, jdk.nashorn.internal.ir.visitor.NodeVisitor=var3837, $r1=var3425, jdk.nashorn.internal.ir.BlockLexicalContext=var2359, $r2=var102, jdk.nashorn.internal.ir.FunctionNode=var3047, $r3=var403, jdk.nashorn.internal.runtime.Source=var1705, r4=var1534, jdk.nashorn.internal.ir.Node=var1173, i0=var551, $r6=var3196, $r7=var1347, $r8=var931, $r9=var970, $i1=var1148, $r10=var1692, $r11=var2585, $i2=var3914, $r12=var3098, $r13=var3759, $r14=var3907}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>": 2,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 2,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r0 := @this: jdk.nashorn.internal.codegen.Lower;	r5 := @parameter0: jdk.nashorn.internal.ir.IdentNode;	$r1 = r0.<jdk.nashorn.internal.codegen.Lower: jdk.nashorn.internal.ir.LexicalContext lc>;	$r2 = (jdk.nashorn.internal.ir.BlockLexicalContext) $r1;	$r3 = virtualinvoke $r2.<jdk.nashorn.internal.ir.BlockLexicalContext: jdk.nashorn.internal.ir.FunctionNode getCurrentFunction()>();	r4 = virtualinvoke $r3.<jdk.nashorn.internal.ir.FunctionNode: jdk.nashorn.internal.runtime.Source getSource()>();	i0 = virtualinvoke r5.<jdk.nashorn.internal.ir.IdentNode: int position()>();	$r6 = new java.lang.StringBuilder;	specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();	$r7 = virtualinvoke r4.<jdk.nashorn.internal.runtime.Source: java.lang.String getName()>();	$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);	$i1 = virtualinvoke r4.<jdk.nashorn.internal.runtime.Source: int getLine(int)>(i0);	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);	$i2 = virtualinvoke r4.<jdk.nashorn.internal.runtime.Source: int getColumn(int)>(i0);	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<eval>");	$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();	return $r14
;block_num 1