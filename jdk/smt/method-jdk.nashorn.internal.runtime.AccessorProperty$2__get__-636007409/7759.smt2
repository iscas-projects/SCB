(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var337 0)
(declare-sort var2305 0)
(declare-sort var1570 0)
(declare-sort var1355 0)
(declare-sort var3446 0)
(declare-sort var1838 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(declare-fun val$tag/428725449 (var337) String)
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun this$0/428725449 (var337) var2305)
(declare-fun getKey/-1967431913 (var1570) String)
(declare-fun cast-from-var2305-to-var1570 (var2305) var1570)
(declare-fun var1355_id/-2071121520 (var3446) String)
(declare-fun cast-from-var337-to-var3446 (var337) var3446)
(declare-fun getSlot/1301857720 (var1570) Int)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun getClass/1258963082 (var3446) ClassObject)
(declare-fun getSimpleName/-390194377 (ClassObject) String)
(declare-fun val$forType/428725449 (var337) ClassObject)
(declare-fun var1838_stripName/695635112 (var3446) String)
(declare-fun cast-from-ClassObject-to-var3446 (ClassObject) var3446)
(declare-fun val$type/428725449 (var337) ClassObject)
(declare-fun append/-1166366385 (String Int) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-var337 var337)
(declare-const var198 var337) ; Statement: r1 := @this: jdk.nashorn.internal.runtime.AccessorProperty$2 
(assert (not (= var198 null-var337)))
(define-const var1676 String String-init) ; Statement: $r0 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1676)) ; Statement: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1676!1 String)
(assert (= var1676!1 ""))
(define-const var3868 String (val$tag/428725449 var198)) ; Statement: $r2 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: java.lang.String val$tag> 
(assert true)
(define-const var26 String (append/672562846 var1676!1 var3868)) ; Statement: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) 
(declare-const var1676!2 String)
(assert (= var1676!2 (str.++ var1676!1 var3868)))
(assert true)
(define-const var1681 String (append/672562846 var26 " \u0027")) ; Statement: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'") 
(declare-const var26!1 String)
(assert (= var26!1 (str.++ var26 " \u0027")))
(define-const var1875 var2305 (this$0/428725449 var198)) ; Statement: $r4 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: jdk.nashorn.internal.runtime.AccessorProperty this$0> 
(assert true)
(define-const var1773 String (getKey/-1967431913 (cast-from-var2305-to-var1570 var1875))) ; Statement: $r5 = virtualinvoke $r4.<jdk.nashorn.internal.runtime.AccessorProperty: java.lang.String getKey()>() 
(assert true)
(define-const var1788 String (append/672562846 var1681 var1773)) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) 
(declare-const var1681!1 String)
(assert (= var1681!1 (str.++ var1681 var1773)))
(assert true)
(define-const var1267 String (append/672562846 var1788 "\u0027 (property=")) ; Statement: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (property=") 
(declare-const var1788!1 String)
(assert (= var1788!1 (str.++ var1788 "\u0027 (property=")))
(define-const var2207 String (var1355_id/-2071121520 (cast-from-var337-to-var3446 var198))) ; Statement: $r8 = staticinvoke <jdk.nashorn.internal.runtime.Debug: java.lang.String id(java.lang.Object)>(r1) 
(assert true)
(define-const var174 String (append/672562846 var1267 var2207)) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) 
(declare-const var1267!1 String)
(assert (= var1267!1 (str.++ var1267 var2207)))
(assert true)
(define-const var2137 String (append/672562846 var174 ", slot=")) ; Statement: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", slot=") 
(declare-const var174!1 String)
(assert (= var174!1 (str.++ var174 ", slot=")))
(define-const var3940 var2305 (this$0/428725449 var198)) ; Statement: $r11 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: jdk.nashorn.internal.runtime.AccessorProperty this$0> 
(assert true)
(define-const var1365 Int (getSlot/1301857720 (cast-from-var2305-to-var1570 var3940))) ; Statement: $i0 = virtualinvoke $r11.<jdk.nashorn.internal.runtime.AccessorProperty: int getSlot()>() 
(assert true)
(define-const var3888 String (append/-1001720160 var2137 var1365)) ; Statement: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) 
(declare-const var2137!1 String)
(assert (str.prefixof var2137 var2137!1))
(assert true)
(define-const var1789 String (append/672562846 var3888 " ")) ; Statement: $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") 
(declare-const var3888!1 String)
(assert (= var3888!1 (str.++ var3888 " ")))
(assert true)
(define-const var838 ClassObject (getClass/1258963082 (cast-from-var337-to-var3446 var198))) ; Statement: $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() 
(assert true)
(define-const var364 String (getSimpleName/-390194377 var838)) ; Statement: $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>() 
(assert true)
(define-const var1260 String (append/672562846 var1789 var364)) ; Statement: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) 
(declare-const var1789!1 String)
(assert (= var1789!1 (str.++ var1789 var364)))
(assert true)
(define-const var1076 String (append/672562846 var1260 " forType=")) ; Statement: $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" forType=") 
(declare-const var1260!1 String)
(assert (= var1260!1 (str.++ var1260 " forType=")))
(define-const var1047 ClassObject (val$forType/428725449 var198)) ; Statement: $r18 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: java.lang.Class val$forType> 
(define-const var2579 String (var1838_stripName/695635112 (cast-from-ClassObject-to-var3446 var1047))) ; Statement: $r19 = staticinvoke <jdk.nashorn.internal.lookup.MethodHandleFactory: java.lang.String stripName(java.lang.Object)>($r18) 
(assert true)
(define-const var2823 String (append/672562846 var1076 var2579)) ; Statement: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) 
(declare-const var1076!1 String)
(assert (= var1076!1 (str.++ var1076 var2579)))
(assert true)
(define-const var2558 String (append/672562846 var2823 ", type=")) ; Statement: $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type=") 
(declare-const var2823!1 String)
(assert (= var2823!1 (str.++ var2823 ", type=")))
(define-const var3204 ClassObject (val$type/428725449 var198)) ; Statement: $r22 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: java.lang.Class val$type> 
(define-const var3632 String (var1838_stripName/695635112 (cast-from-ClassObject-to-var3446 var3204))) ; Statement: $r23 = staticinvoke <jdk.nashorn.internal.lookup.MethodHandleFactory: java.lang.String stripName(java.lang.Object)>($r22) 
(assert true)
(define-const var2644 String (append/672562846 var2558 var3632)) ; Statement: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) 
(declare-const var2558!1 String)
(assert (= var2558!1 (str.++ var2558 var3632)))
(assert true)
(define-const var1557 String (append/-1166366385 var2644 41)) ; Statement: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41) 
(declare-const var2644!1 String)
(assert (str.prefixof var2644 var2644!1))
(assert true)
(define-const var1200 String (toString/-2075883882 var1557)) ; Statement: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r27 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), val$tag/428725449=([jdk.nashorn.internal.runtime.AccessorProperty$2], java.lang.String), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), this$0/428725449=([jdk.nashorn.internal.runtime.AccessorProperty$2], jdk.nashorn.internal.runtime.AccessorProperty), getKey/-1967431913=([jdk.nashorn.internal.runtime.Property], java.lang.String), cast-from-var2305-to-var1570=([jdk.nashorn.internal.runtime.AccessorProperty], jdk.nashorn.internal.runtime.Property), var1355_id/-2071121520=([java.lang.Object], java.lang.String), cast-from-var337-to-var3446=([jdk.nashorn.internal.runtime.AccessorProperty$2], java.lang.Object), getSlot/1301857720=([jdk.nashorn.internal.runtime.Property], int), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), getClass/1258963082=([java.lang.Object], java.lang.Class), getSimpleName/-390194377=([java.lang.Class], java.lang.String), val$forType/428725449=([jdk.nashorn.internal.runtime.AccessorProperty$2], java.lang.Class), var1838_stripName/695635112=([java.lang.Object], java.lang.String), cast-from-ClassObject-to-var3446=([java.lang.Class], java.lang.Object), val$type/428725449=([jdk.nashorn.internal.runtime.AccessorProperty$2], java.lang.Class), append/-1166366385=([java.lang.StringBuilder, char], java.lang.StringBuilder), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var337=jdk.nashorn.internal.runtime.AccessorProperty$2, var198=r1, var1676=$r0, var3868=$r2, var26=$r3, var1681=$r6, var2305=jdk.nashorn.internal.runtime.AccessorProperty, var1875=$r4, var1570=jdk.nashorn.internal.runtime.Property, var1773=$r5, var1788=$r7, var1267=$r9, var1355=jdk.nashorn.internal.runtime.Debug, var3446=java.lang.Object, var2207=$r8, var174=$r10, var2137=$r12, var3940=$r11, var1365=$i0, var3888=$r13, var1789=$r16, var838=$r14, var364=$r15, var1260=$r17, var1076=$r20, var1047=$r18, var1838=jdk.nashorn.internal.lookup.MethodHandleFactory, var2579=$r19, var2823=$r21, var2558=$r24, var3204=$r22, var3632=$r23, var2644=$r25, var1557=$r26, var1200=$r27}
; {jdk.nashorn.internal.runtime.AccessorProperty$2=var337, r1=var198, $r0=var1676, $r2=var3868, $r3=var26, $r6=var1681, jdk.nashorn.internal.runtime.AccessorProperty=var2305, $r4=var1875, jdk.nashorn.internal.runtime.Property=var1570, $r5=var1773, $r7=var1788, $r9=var1267, jdk.nashorn.internal.runtime.Debug=var1355, java.lang.Object=var3446, $r8=var2207, $r10=var174, $r12=var2137, $r11=var3940, $i0=var1365, $r13=var3888, $r16=var1789, $r14=var838, $r15=var364, $r17=var1260, $r20=var1076, $r18=var1047, jdk.nashorn.internal.lookup.MethodHandleFactory=var1838, $r19=var2579, $r21=var2823, $r24=var2558, $r22=var3204, $r23=var3632, $r25=var2644, $r26=var1557, $r27=var1200}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 12,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r1 := @this: jdk.nashorn.internal.runtime.AccessorProperty$2;	$r0 = new java.lang.StringBuilder;	specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();	$r2 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: java.lang.String val$tag>;	$r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);	$r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");	$r4 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: jdk.nashorn.internal.runtime.AccessorProperty this$0>;	$r5 = virtualinvoke $r4.<jdk.nashorn.internal.runtime.AccessorProperty: java.lang.String getKey()>();	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);	$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (property=");	$r8 = staticinvoke <jdk.nashorn.internal.runtime.Debug: java.lang.String id(java.lang.Object)>(r1);	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);	$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", slot=");	$r11 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: jdk.nashorn.internal.runtime.AccessorProperty this$0>;	$i0 = virtualinvoke $r11.<jdk.nashorn.internal.runtime.AccessorProperty: int getSlot()>();	$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);	$r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");	$r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();	$r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();	$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);	$r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" forType=");	$r18 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: java.lang.Class val$forType>;	$r19 = staticinvoke <jdk.nashorn.internal.lookup.MethodHandleFactory: java.lang.String stripName(java.lang.Object)>($r18);	$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);	$r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type=");	$r22 = r1.<jdk.nashorn.internal.runtime.AccessorProperty$2: java.lang.Class val$type>;	$r23 = staticinvoke <jdk.nashorn.internal.lookup.MethodHandleFactory: java.lang.String stripName(java.lang.Object)>($r22);	$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);	$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);	$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();	return $r27
;block_num 1