(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var2970 0)
(declare-sort var2419 0)
(declare-sort var1366 0)
(declare-sort var430 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var1366_lineSeparator/-342590142 () String)
(declare-fun var430_descPosition/987809969 (Int) Int)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(declare-fun getName/-243293101 (var2419) String)
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun append/-1166366385 (String Int) String)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun getSourceLine/-1366562966 (var2419 Int) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-String String)
(declare-const null-var2419 var2419)
(declare-const null-Int Int)
(declare-const var1027 String) ; Statement: r9 := @parameter0: java.lang.String 
(assert (not (= var1027 null-String)))
(declare-const var3178 var2419) ; Statement: r2 := @parameter1: jdk.nashorn.internal.runtime.Source 
(assert (not (= var3178 null-var2419)))
(declare-const var1207 Int) ; Statement: i2 := @parameter2: int 
(assert (not (= var1207 null-Int)))
(declare-const var3051 Int) ; Statement: i3 := @parameter3: int 
(assert (not (= var3051 null-Int)))
(declare-const var2488 Int) ; Statement: l0 := @parameter4: long 
(assert (not (= var2488 null-Int)))
(define-const var2367 String var1366_lineSeparator/-342590142) ; Statement: r0 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>() 
(define-const var3203 Int (var430_descPosition/987809969 var2488)) ; Statement: i1 = staticinvoke <jdk.nashorn.internal.parser.Token: int descPosition(long)>(l0) 
(define-const var3614 String String-init) ; Statement: $r15 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var3614)) ; Statement: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() 
(declare-const var3614!1 String)
(assert (= var3614!1 ""))
(assert true)
(define-const var1881 String (getName/-243293101 var3178)) ; Statement: $r3 = virtualinvoke r2.<jdk.nashorn.internal.runtime.Source: java.lang.String getName()>() 
(assert true)
(define-const var3845 String (append/672562846 var3614!1 var1881)) ; Statement: $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) 
(declare-const var3614!2 String)
(assert (= var3614!2 (str.++ var3614!1 var1881)))
(assert true)
(define-const var1086 String (append/-1166366385 var3845 58)) ; Statement: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) 
(declare-const var3845!1 String)
(assert (str.prefixof var3845 var3845!1))
(assert true)
(define-const var3647 String (append/-1001720160 var1086 var1207)) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2) 
(declare-const var1086!1 String)
(assert (str.prefixof var1086 var1086!1))
(assert true)
(define-const var3495 String (append/-1166366385 var3647 58)) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) 
(declare-const var3647!1 String)
(assert (str.prefixof var3647 var3647!1))
(assert true)
(define-const var1964 String (append/-1001720160 var3495 var3051)) ; Statement: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3) 
(declare-const var3495!1 String)
(assert (str.prefixof var3495 var3495!1))
(assert true)
(define-const var2546 String (append/-1166366385 var1964 32)) ; Statement: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) 
(declare-const var1964!1 String)
(assert (str.prefixof var1964 var1964!1))
(assert true)
(define-const var1496 String (append/672562846 var2546 var1027)) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) 
(declare-const var2546!1 String)
(assert (= var2546!1 (str.++ var2546 var1027)))
(assert true)
;(assert (append/672562846 var1496 var2367)) ; Statement: virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) 
(declare-const var1496!1 String)
(assert (= var1496!1 (str.++ var1496 var2367)))
(assert true)
(define-const var3099 String (getSourceLine/-1366562966 var3178 var3203)) ; Statement: r12 = virtualinvoke r2.<jdk.nashorn.internal.runtime.Source: java.lang.String getSourceLine(int)>(i1) 
(assert true)
(define-const var345 String (append/672562846 var3614!2 var3099)) ; Statement: $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) 
(declare-const var3614!3 String)
(assert (= var3614!3 (str.++ var3614!2 var3099)))
(assert true)
;(assert (append/672562846 var345 var2367)) ; Statement: virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) 
(declare-const var345!1 String)
(assert (= var345!1 (str.++ var345 var2367)))
(define-const var447 Int 0) ; Statement: i6 = 0 
(assert true) ; Non Conditional
 ; Statement: if i6 >= i3 goto virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94) 
(assert (>= var447 var3051)) ; Cond: i6 >= i3 
(assert true)
;(assert (append/-1166366385 var3614!3 94)) ; Statement: virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94) 
(declare-const var3614!4 String)
(assert (str.prefixof var3614!3 var3614!4))
(assert true)
(define-const var3118 String (toString/-2075883882 var3614!4)) ; Statement: $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r14 
(check-sat)
(get-model)
(get-unsat-core)
; {var1366_lineSeparator/-342590142=([], java.lang.String), var430_descPosition/987809969=([long], int), String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), getName/-243293101=([jdk.nashorn.internal.runtime.Source], java.lang.String), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), append/-1166366385=([java.lang.StringBuilder, char], java.lang.StringBuilder), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), getSourceLine/-1366562966=([jdk.nashorn.internal.runtime.Source, int], java.lang.String), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var1027=r9, var2970=null_type, var2419=jdk.nashorn.internal.runtime.Source, var3178=r2, var1207=i2, var3051=i3, var2488=l0, var1366=java.lang.System, var2367=r0, var430=jdk.nashorn.internal.parser.Token, var3203=i1, var3614=$r15, var1881=$r3, var3845=$r4, var1086=$r5, var3647=$r6, var3495=$r7, var1964=$r8, var2546=$r10, var1496=$r11, var3099=r12, var345=$r13, var447=i6, var3118=$r14}
; {r9=var1027, null_type=var2970, jdk.nashorn.internal.runtime.Source=var2419, r2=var3178, i2=var1207, i3=var3051, l0=var2488, java.lang.System=var1366, r0=var2367, jdk.nashorn.internal.parser.Token=var430, i1=var3203, $r15=var3614, $r3=var1881, $r4=var3845, $r5=var1086, $r6=var3647, $r7=var3495, $r8=var1964, $r10=var2546, $r11=var1496, r12=var3099, $r13=var345, i6=var447, $r14=var3118}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 5,"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>": 4,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 2,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r9 := @parameter0: java.lang.String;	r2 := @parameter1: jdk.nashorn.internal.runtime.Source;	i2 := @parameter2: int;	i3 := @parameter3: int;	l0 := @parameter4: long;	r0 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();	i1 = staticinvoke <jdk.nashorn.internal.parser.Token: int descPosition(long)>(l0);	$r15 = new java.lang.StringBuilder;	specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();	$r3 = virtualinvoke r2.<jdk.nashorn.internal.runtime.Source: java.lang.String getName()>();	$r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);	$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);	$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);	$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);	virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);	r12 = virtualinvoke r2.<jdk.nashorn.internal.runtime.Source: java.lang.String getSourceLine(int)>(i1);	$r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);	virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);	i6 = 0;	if i6 >= i3 goto virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);	virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);	$r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();	return $r14
;block_num 3