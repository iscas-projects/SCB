(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1509 0)
(declare-sort var995 0)
(declare-sort var2250 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(define-fun <init>/1968657023 () String "")
(declare-fun getLocalType/757166644 (var1509) ClassObject)
(declare-fun getKey/-1967431913 (var1509) String)
(declare-fun var1509_indent/1801887580 (String Int) String)
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun var995_id/-2071121520 (var2250) String)
(declare-fun cast-from-var1509-to-var2250 (var1509) var2250)
(declare-fun flags/-1478710636 (var1509) Int)
(declare-fun Int_toHexString/1865784998 (Int) String)
(declare-fun getClass/1258963082 (var2250) ClassObject)
(declare-fun getSimpleName/-390194377 (ClassObject) String)
(declare-fun var1509_type/-1589040184 (ClassObject) String)
(declare-fun append/-1166366385 (String Int) String)
(declare-fun slot/-1478710636 (var1509) Int)
(define-fun cast-from-Int-to-Int ((arg Int)) Int arg)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-const null-var1509 var1509)
(declare-const var282 var1509) ; Statement: r1 := @this: jdk.nashorn.internal.runtime.Property 
(assert (not (= var282 null-var1509)))
(define-const var3503 String String-init) ; Statement: $r25 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var3503)) ; Statement: specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() 
(declare-const var3503!1 String)
(assert (= var3503!1 ""))
(assert true)
(define-const var1153 ClassObject (getLocalType/757166644 var282)) ; Statement: r2 = virtualinvoke r1.<jdk.nashorn.internal.runtime.Property: java.lang.Class getLocalType()>() 
(assert true)
(define-const var3557 String (getKey/-1967431913 var282)) ; Statement: $r3 = virtualinvoke r1.<jdk.nashorn.internal.runtime.Property: java.lang.String getKey()>() 
(define-const var902 String (var1509_indent/1801887580 var3557 20)) ; Statement: $r4 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String indent(java.lang.String,int)>($r3, 20) 
(assert true)
(define-const var760 String (append/672562846 var3503!1 var902)) ; Statement: $r5 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) 
(declare-const var3503!2 String)
(assert (= var3503!2 (str.++ var3503!1 var902)))
(assert true)
(define-const var898 String (append/672562846 var760 " id=")) ; Statement: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id=") 
(declare-const var760!1 String)
(assert (= var760!1 (str.++ var760 " id=")))
(define-const var1817 String (var995_id/-2071121520 (cast-from-var1509-to-var2250 var282))) ; Statement: $r6 = staticinvoke <jdk.nashorn.internal.runtime.Debug: java.lang.String id(java.lang.Object)>(r1) 
(assert true)
(define-const var2979 String (append/672562846 var898 var1817)) ; Statement: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) 
(declare-const var898!1 String)
(assert (= var898!1 (str.++ var898 var1817)))
(assert true)
(define-const var1530 String (append/672562846 var2979 " (0x")) ; Statement: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (0x") 
(declare-const var2979!1 String)
(assert (= var2979!1 (str.++ var2979 " (0x")))
(define-const var3171 Int (flags/-1478710636 var282)) ; Statement: $i0 = r1.<jdk.nashorn.internal.runtime.Property: int flags> 
(define-const var1680 String (Int_toHexString/1865784998 var3171)) ; Statement: $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0) 
(define-const var927 String (var1509_indent/1801887580 var1680 4)) ; Statement: $r10 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String indent(java.lang.String,int)>($r9, 4) 
(assert true)
(define-const var329 String (append/672562846 var1530 var927)) ; Statement: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) 
(declare-const var1530!1 String)
(assert (= var1530!1 (str.++ var1530 var927)))
(assert true)
(define-const var1305 String (append/672562846 var329 ") ")) ; Statement: $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") 
(declare-const var329!1 String)
(assert (= var329!1 (str.++ var329 ") ")))
(assert true)
(define-const var3498 ClassObject (getClass/1258963082 (cast-from-var1509-to-var2250 var282))) ; Statement: $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() 
(assert true)
(define-const var3864 String (getSimpleName/-390194377 var3498)) ; Statement: $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getSimpleName()>() 
(assert true)
(define-const var3084 String (append/672562846 var1305 var3864)) ; Statement: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) 
(declare-const var1305!1 String)
(assert (= var1305!1 (str.++ var1305 var3864)))
(assert true)
(define-const var2830 String (append/672562846 var3084 " {")) ; Statement: $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {") 
(declare-const var3084!1 String)
(assert (= var3084!1 (str.++ var3084 " {")))
(define-const var357 String (var1509_type/-1589040184 var1153)) ; Statement: $r17 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String type(java.lang.Class)>(r2) 
(define-const var614 String (var1509_indent/1801887580 var357 5)) ; Statement: $r18 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String indent(java.lang.String,int)>($r17, 5) 
(assert true)
(define-const var904 String (append/672562846 var2830 var614)) ; Statement: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) 
(declare-const var2830!1 String)
(assert (= var2830!1 (str.++ var2830 var614)))
(assert true)
;(assert (append/-1166366385 var904 125)) ; Statement: virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) 
(declare-const var904!1 String)
(assert (str.prefixof var904 var904!1))
(define-const var3443 Int (slot/-1478710636 var282)) ; Statement: $i1 = r1.<jdk.nashorn.internal.runtime.Property: int slot> 
(define-const var3710 Int (cast-from-Int-to-Int (- 1))) ; Statement: $i4 = (int) -1 
 ; Statement: if $i1 == $i4 goto $r21 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert (= var3443 var3710)) ; Cond: $i1 == $i4 
(assert true)
(define-const var2793 String (toString/-2075883882 var3503!2)) ; Statement: $r21 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r21 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), <init>/1968657023=([java.lang.StringBuilder], void), getLocalType/757166644=([jdk.nashorn.internal.runtime.Property], java.lang.Class), getKey/-1967431913=([jdk.nashorn.internal.runtime.Property], java.lang.String), var1509_indent/1801887580=([java.lang.String, int], java.lang.String), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), var995_id/-2071121520=([java.lang.Object], java.lang.String), cast-from-var1509-to-var2250=([jdk.nashorn.internal.runtime.Property], java.lang.Object), flags/-1478710636=([jdk.nashorn.internal.runtime.Property], int), Int_toHexString/1865784998=([int], java.lang.String), getClass/1258963082=([java.lang.Object], java.lang.Class), getSimpleName/-390194377=([java.lang.Class], java.lang.String), var1509_type/-1589040184=([java.lang.Class], java.lang.String), append/-1166366385=([java.lang.StringBuilder, char], java.lang.StringBuilder), slot/-1478710636=([jdk.nashorn.internal.runtime.Property], int), cast-from-Int-to-Int=([int], int), toString/-2075883882=([java.lang.StringBuilder], java.lang.String)}
; {var1509=jdk.nashorn.internal.runtime.Property, var282=r1, var3503=$r25, var1153=r2, var3557=$r3, var902=$r4, var760=$r5, var898=$r7, var995=jdk.nashorn.internal.runtime.Debug, var2250=java.lang.Object, var1817=$r6, var2979=$r8, var1530=$r11, var3171=$i0, var1680=$r9, var927=$r10, var329=$r12, var1305=$r15, var3498=$r13, var3864=$r14, var3084=$r16, var2830=$r19, var357=$r17, var614=$r18, var904=$r20, var3443=$i1, var3710=$i4, var2793=$r21}
; {jdk.nashorn.internal.runtime.Property=var1509, r1=var282, $r25=var3503, r2=var1153, $r3=var3557, $r4=var902, $r5=var760, $r7=var898, jdk.nashorn.internal.runtime.Debug=var995, java.lang.Object=var2250, $r6=var1817, $r8=var2979, $r11=var1530, $i0=var3171, $r9=var1680, $r10=var927, $r12=var329, $r15=var1305, $r13=var3498, $r14=var3864, $r16=var3084, $r19=var2830, $r17=var357, $r18=var614, $r20=var904, $i1=var3443, $i4=var3710, $r21=var2793}
;seq <java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(char)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>()>": 1,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 9,"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>": 1,"<java.lang.StringBuilder: java.lang.String toString()>": 1}
;stmts r1 := @this: jdk.nashorn.internal.runtime.Property;	$r25 = new java.lang.StringBuilder;	specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();	r2 = virtualinvoke r1.<jdk.nashorn.internal.runtime.Property: java.lang.Class getLocalType()>();	$r3 = virtualinvoke r1.<jdk.nashorn.internal.runtime.Property: java.lang.String getKey()>();	$r4 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String indent(java.lang.String,int)>($r3, 20);	$r5 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);	$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id=");	$r6 = staticinvoke <jdk.nashorn.internal.runtime.Debug: java.lang.String id(java.lang.Object)>(r1);	$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);	$r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (0x");	$i0 = r1.<jdk.nashorn.internal.runtime.Property: int flags>;	$r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);	$r10 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String indent(java.lang.String,int)>($r9, 4);	$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);	$r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");	$r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();	$r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getSimpleName()>();	$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);	$r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");	$r17 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String type(java.lang.Class)>(r2);	$r18 = staticinvoke <jdk.nashorn.internal.runtime.Property: java.lang.String indent(java.lang.String,int)>($r17, 5);	$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);	virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);	$i1 = r1.<jdk.nashorn.internal.runtime.Property: int slot>;	$i4 = (int) -1;	if $i1 == $i4 goto $r21 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();	$r21 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();	return $r21
;block_num 2