(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1230 0)
(declare-sort var502 0)
(declare-sort var3467 0)
(declare-sort var3279 0)
(declare-sort var672 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun String-init () String)
(declare-fun toString/-544818494 (var502 Int) String)
(declare-fun cast-from-var1230-to-var502 (var1230) var502)
(define-fun <init>/-1061048412 ((s String)) String s)
(define-fun <init>/1968657023 () String "")
(define-fun append/672562846 ((s String) (tail String)) String (str.++ s tail))
(declare-fun typeToString/-492623909 (var1230) String)
(define-fun toString/-2075883882 ((s String)) String s)
(declare-fun regNum/-906381155 (var1230) Int)
(define-fun append/-1001720160 ((s String) (tail Int)) String (str.++ s (str.from_int tail)))
(declare-fun option/-906381155 (var1230) Int)
(declare-fun var3467_toString/964867516 (Int) String)
(declare-fun target/-906381155 (var1230) var3279)
(declare-fun var3279_pad/1938805371 (var672 Int) String)
(declare-fun cast-from-var3279-to-var672 (var3279) var672)
(declare-fun callAddr/-906381155 (var1230) Int)
(declare-fun minLength/-906381155 (var1230) Int)
(declare-fun maxLength/-906381155 (var1230) Int)
(declare-fun charLength/-906381155 (var1230) Int)
(declare-fun optCount/-906381155 (var1230) Int)
(declare-const null-var1230 var1230)
(declare-const null-Int Int)
(declare-const var2087 var1230) ; Statement: r1 := @this: jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode 
(assert (not (= var2087 null-var1230)))
(declare-const var2723 Int) ; Statement: i0 := @parameter0: int 
(assert (not (= var2723 null-Int)))
(define-const var278 String String-init) ; Statement: $r0 = new java.lang.StringBuilder 
(assert true)
(define-const var2868 String (toString/-544818494 (cast-from-var1230-to-var502 var2087) var2723)) ; Statement: $r2 = specialinvoke r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode: java.lang.String toString(int)>(i0) 
(assert true)
;(assert (<init>/-1061048412 var278 var2868)) ; Statement: specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) 
(declare-const var278!1 String)
(assert (= var278!1 var2868))
(define-const var3140 String String-init) ; Statement: $r3 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var3140)) ; Statement: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() 
(declare-const var3140!1 String)
(assert (= var3140!1 ""))
(assert true)
(define-const var1929 String (append/672562846 var3140!1 "\n  type: ")) ; Statement: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  type: ") 
(declare-const var3140!2 String)
(assert (= var3140!2 (str.++ var3140!1 "\n  type: ")))
(assert true)
(define-const var2657 String (typeToString/-492623909 var2087)) ; Statement: $r4 = virtualinvoke r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: java.lang.String typeToString()>() 
(assert true)
(define-const var3907 String (append/672562846 var1929 var2657)) ; Statement: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) 
(declare-const var1929!1 String)
(assert (= var1929!1 (str.++ var1929 var2657)))
(assert true)
(define-const var2679 String (toString/-2075883882 var3907)) ; Statement: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!1 var2679)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) 
(declare-const var278!2 String)
(assert (= var278!2 (str.++ var278!1 var2679)))
(define-const var622 String String-init) ; Statement: $r8 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var622)) ; Statement: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() 
(declare-const var622!1 String)
(assert (= var622!1 ""))
(assert true)
(define-const var1175 String (append/672562846 var622!1 "\n  regNum: ")) ; Statement: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  regNum: ") 
(declare-const var622!2 String)
(assert (= var622!2 (str.++ var622!1 "\n  regNum: ")))
(define-const var467 Int (regNum/-906381155 var2087)) ; Statement: $i1 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int regNum> 
(assert true)
(define-const var2060 String (append/-1001720160 var1175 var467)) ; Statement: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) 
(declare-const var1175!1 String)
(assert (str.prefixof var1175 var1175!1))
(assert true)
(define-const var2871 String (toString/-2075883882 var2060)) ; Statement: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!2 var2871)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) 
(declare-const var278!3 String)
(assert (= var278!3 (str.++ var278!2 var2871)))
(define-const var1639 String String-init) ; Statement: $r12 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1639)) ; Statement: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1639!1 String)
(assert (= var1639!1 ""))
(assert true)
(define-const var3374 String (append/672562846 var1639!1 "\n  option: ")) ; Statement: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  option: ") 
(declare-const var1639!2 String)
(assert (= var1639!2 (str.++ var1639!1 "\n  option: ")))
(define-const var2684 Int (option/-906381155 var2087)) ; Statement: $i2 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int option> 
(define-const var2457 String (var3467_toString/964867516 var2684)) ; Statement: $r13 = staticinvoke <jdk.nashorn.internal.runtime.regexp.joni.Option: java.lang.String toString(int)>($i2) 
(assert true)
(define-const var3269 String (append/672562846 var3374 var2457)) ; Statement: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) 
(declare-const var3374!1 String)
(assert (= var3374!1 (str.++ var3374 var2457)))
(assert true)
(define-const var2477 String (toString/-2075883882 var3269)) ; Statement: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!3 var2477)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) 
(declare-const var278!4 String)
(assert (= var278!4 (str.++ var278!3 var2477)))
(define-const var2261 String String-init) ; Statement: $r17 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var2261)) ; Statement: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() 
(declare-const var2261!1 String)
(assert (= var2261!1 ""))
(assert true)
(define-const var1087 String (append/672562846 var2261!1 "\n  target: ")) ; Statement: $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  target: ") 
(declare-const var2261!2 String)
(assert (= var2261!2 (str.++ var2261!1 "\n  target: ")))
(define-const var2161 var3279 (target/-906381155 var2087)) ; Statement: $r18 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: jdk.nashorn.internal.runtime.regexp.joni.ast.Node target> 
(define-const var1239 Int (+ var2723 1)) ; Statement: $i3 = i0 + 1 
(define-const var1184 String (var3279_pad/1938805371 (cast-from-var3279-to-var672 var2161) var1239)) ; Statement: $r19 = staticinvoke <jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: java.lang.String pad(java.lang.Object,int)>($r18, $i3) 
(assert true)
(define-const var1601 String (append/672562846 var1087 var1184)) ; Statement: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) 
(declare-const var1087!1 String)
(assert (= var1087!1 (str.++ var1087 var1184)))
(assert true)
(define-const var2861 String (toString/-2075883882 var1601)) ; Statement: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!4 var2861)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) 
(declare-const var278!5 String)
(assert (= var278!5 (str.++ var278!4 var2861)))
(define-const var1002 String String-init) ; Statement: $r23 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1002)) ; Statement: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1002!1 String)
(assert (= var1002!1 ""))
(assert true)
(define-const var778 String (append/672562846 var1002!1 "\n  callAddr: ")) ; Statement: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  callAddr: ") 
(declare-const var1002!2 String)
(assert (= var1002!2 (str.++ var1002!1 "\n  callAddr: ")))
(define-const var2467 Int (callAddr/-906381155 var2087)) ; Statement: $i4 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int callAddr> 
(assert true)
(define-const var3457 String (append/-1001720160 var778 var2467)) ; Statement: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) 
(declare-const var778!1 String)
(assert (str.prefixof var778 var778!1))
(assert true)
(define-const var2893 String (toString/-2075883882 var3457)) ; Statement: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!5 var2893)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) 
(declare-const var278!6 String)
(assert (= var278!6 (str.++ var278!5 var2893)))
(define-const var10 String String-init) ; Statement: $r27 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var10)) ; Statement: specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() 
(declare-const var10!1 String)
(assert (= var10!1 ""))
(assert true)
(define-const var174 String (append/672562846 var10!1 "\n  minLength: ")) ; Statement: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  minLength: ") 
(declare-const var10!2 String)
(assert (= var10!2 (str.++ var10!1 "\n  minLength: ")))
(define-const var3275 Int (minLength/-906381155 var2087)) ; Statement: $i5 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int minLength> 
(assert true)
(define-const var360 String (append/-1001720160 var174 var3275)) ; Statement: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) 
(declare-const var174!1 String)
(assert (str.prefixof var174 var174!1))
(assert true)
(define-const var383 String (toString/-2075883882 var360)) ; Statement: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!6 var383)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30) 
(declare-const var278!7 String)
(assert (= var278!7 (str.++ var278!6 var383)))
(define-const var920 String String-init) ; Statement: $r31 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var920)) ; Statement: specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() 
(declare-const var920!1 String)
(assert (= var920!1 ""))
(assert true)
(define-const var1853 String (append/672562846 var920!1 "\n  maxLength: ")) ; Statement: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  maxLength: ") 
(declare-const var920!2 String)
(assert (= var920!2 (str.++ var920!1 "\n  maxLength: ")))
(define-const var367 Int (maxLength/-906381155 var2087)) ; Statement: $i6 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int maxLength> 
(assert true)
(define-const var177 String (append/-1001720160 var1853 var367)) ; Statement: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6) 
(declare-const var1853!1 String)
(assert (str.prefixof var1853 var1853!1))
(assert true)
(define-const var2596 String (toString/-2075883882 var177)) ; Statement: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!7 var2596)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) 
(declare-const var278!8 String)
(assert (= var278!8 (str.++ var278!7 var2596)))
(define-const var1253 String String-init) ; Statement: $r35 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var1253)) ; Statement: specialinvoke $r35.<java.lang.StringBuilder: void <init>()>() 
(declare-const var1253!1 String)
(assert (= var1253!1 ""))
(assert true)
(define-const var2613 String (append/672562846 var1253!1 "\n  charLength: ")) ; Statement: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  charLength: ") 
(declare-const var1253!2 String)
(assert (= var1253!2 (str.++ var1253!1 "\n  charLength: ")))
(define-const var320 Int (charLength/-906381155 var2087)) ; Statement: $i7 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int charLength> 
(assert true)
(define-const var3499 String (append/-1001720160 var2613 var320)) ; Statement: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7) 
(declare-const var2613!1 String)
(assert (str.prefixof var2613 var2613!1))
(assert true)
(define-const var1697 String (toString/-2075883882 var3499)) ; Statement: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!8 var1697)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38) 
(declare-const var278!9 String)
(assert (= var278!9 (str.++ var278!8 var1697)))
(define-const var834 String String-init) ; Statement: $r39 = new java.lang.StringBuilder 
(assert true)
;(assert (<init>/1968657023 var834)) ; Statement: specialinvoke $r39.<java.lang.StringBuilder: void <init>()>() 
(declare-const var834!1 String)
(assert (= var834!1 ""))
(assert true)
(define-const var2243 String (append/672562846 var834!1 "\n  optCount: ")) ; Statement: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  optCount: ") 
(declare-const var834!2 String)
(assert (= var834!2 (str.++ var834!1 "\n  optCount: ")))
(define-const var3633 Int (optCount/-906381155 var2087)) ; Statement: $i8 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int optCount> 
(assert true)
(define-const var2634 String (append/-1001720160 var2243 var3633)) ; Statement: $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8) 
(declare-const var2243!1 String)
(assert (str.prefixof var2243 var2243!1))
(assert true)
(define-const var62 String (toString/-2075883882 var2634)) ; Statement: $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>() 
(assert true)
;(assert (append/672562846 var278!9 var62)) ; Statement: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42) 
(declare-const var278!10 String)
(assert (= var278!10 (str.++ var278!9 var62)))
(assert true)
(define-const var2933 String (toString/-2075883882 var278!10)) ; Statement: $r43 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() 
 ; Statement: return $r43 
(check-sat)
(get-model)
(get-unsat-core)
; {String-init=([], java.lang.StringBuilder), toString/-544818494=([jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode, int], java.lang.String), cast-from-var1230-to-var502=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode), <init>/-1061048412=([java.lang.StringBuilder, java.lang.String], void), <init>/1968657023=([java.lang.StringBuilder], void), append/672562846=([java.lang.StringBuilder, java.lang.String], java.lang.StringBuilder), typeToString/-492623909=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], java.lang.String), toString/-2075883882=([java.lang.StringBuilder], java.lang.String), regNum/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int), append/-1001720160=([java.lang.StringBuilder, int], java.lang.StringBuilder), option/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int), var3467_toString/964867516=([int], java.lang.String), target/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], jdk.nashorn.internal.runtime.regexp.joni.ast.Node), var3279_pad/1938805371=([java.lang.Object, int], java.lang.String), cast-from-var3279-to-var672=([jdk.nashorn.internal.runtime.regexp.joni.ast.Node], java.lang.Object), callAddr/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int), minLength/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int), maxLength/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int), charLength/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int), optCount/-906381155=([jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode], int)}
; {var1230=jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode, var2087=r1, var2723=i0, var278=$r0, var502=jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode, var2868=$r2, var3140=$r3, var1929=$r5, var2657=$r4, var3907=$r6, var2679=$r7, var622=$r8, var1175=$r9, var467=$i1, var2060=$r10, var2871=$r11, var1639=$r12, var3374=$r14, var2684=$i2, var3467=jdk.nashorn.internal.runtime.regexp.joni.Option, var2457=$r13, var3269=$r15, var2477=$r16, var2261=$r17, var1087=$r20, var3279=jdk.nashorn.internal.runtime.regexp.joni.ast.Node, var2161=$r18, var1239=$i3, var672=java.lang.Object, var1184=$r19, var1601=$r21, var2861=$r22, var1002=$r23, var778=$r24, var2467=$i4, var3457=$r25, var2893=$r26, var10=$r27, var174=$r28, var3275=$i5, var360=$r29, var383=$r30, var920=$r31, var1853=$r32, var367=$i6, var177=$r33, var2596=$r34, var1253=$r35, var2613=$r36, var320=$i7, var3499=$r37, var1697=$r38, var834=$r39, var2243=$r40, var3633=$i8, var2634=$r41, var62=$r42, var2933=$r43}
; {jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode=var1230, r1=var2087, i0=var2723, $r0=var278, jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode=var502, $r2=var2868, $r3=var3140, $r5=var1929, $r4=var2657, $r6=var3907, $r7=var2679, $r8=var622, $r9=var1175, $i1=var467, $r10=var2060, $r11=var2871, $r12=var1639, $r14=var3374, $i2=var2684, jdk.nashorn.internal.runtime.regexp.joni.Option=var3467, $r13=var2457, $r15=var3269, $r16=var2477, $r17=var2261, $r20=var1087, jdk.nashorn.internal.runtime.regexp.joni.ast.Node=var3279, $r18=var2161, $i3=var1239, java.lang.Object=var672, $r19=var1184, $r21=var1601, $r22=var2861, $r23=var1002, $r24=var778, $i4=var2467, $r25=var3457, $r26=var2893, $r27=var10, $r28=var174, $i5=var3275, $r29=var360, $r30=var383, $r31=var920, $r32=var1853, $i6=var367, $r33=var177, $r34=var2596, $r35=var1253, $r36=var2613, $i7=var320, $r37=var3499, $r38=var1697, $r39=var834, $r40=var2243, $i8=var3633, $r41=var2634, $r42=var62, $r43=var2933}
;seq <jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode: java.lang.String toString(int)>;	<java.lang.StringBuilder: void <init>(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<jdk.nashorn.internal.runtime.regexp.joni.Option: java.lang.String toString(int)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: void <init>()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.StringBuilder append(int)>;	<java.lang.StringBuilder: java.lang.String toString()>;	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>;	<java.lang.StringBuilder: java.lang.String toString()>
;cnt {"<java.lang.StringBuilder: void <init>(java.lang.String)>": 1,"<java.lang.StringBuilder: void <init>()>": 9,"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>": 21,"<java.lang.StringBuilder: java.lang.String toString()>": 10,"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>": 6}
;stmts r1 := @this: jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode;	i0 := @parameter0: int;	$r0 = new java.lang.StringBuilder;	$r2 = specialinvoke r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.StateNode: java.lang.String toString(int)>(i0);	specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);	$r3 = new java.lang.StringBuilder;	specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();	$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  type: ");	$r4 = virtualinvoke r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: java.lang.String typeToString()>();	$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);	$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);	$r8 = new java.lang.StringBuilder;	specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();	$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  regNum: ");	$i1 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int regNum>;	$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);	$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);	$r12 = new java.lang.StringBuilder;	specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();	$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  option: ");	$i2 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int option>;	$r13 = staticinvoke <jdk.nashorn.internal.runtime.regexp.joni.Option: java.lang.String toString(int)>($i2);	$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);	$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);	$r17 = new java.lang.StringBuilder;	specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();	$r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  target: ");	$r18 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: jdk.nashorn.internal.runtime.regexp.joni.ast.Node target>;	$i3 = i0 + 1;	$r19 = staticinvoke <jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: java.lang.String pad(java.lang.Object,int)>($r18, $i3);	$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);	$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);	$r23 = new java.lang.StringBuilder;	specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();	$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  callAddr: ");	$i4 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int callAddr>;	$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);	$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);	$r27 = new java.lang.StringBuilder;	specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();	$r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  minLength: ");	$i5 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int minLength>;	$r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);	$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);	$r31 = new java.lang.StringBuilder;	specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();	$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  maxLength: ");	$i6 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int maxLength>;	$r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);	$r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);	$r35 = new java.lang.StringBuilder;	specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();	$r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  charLength: ");	$i7 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int charLength>;	$r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);	$r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);	$r39 = new java.lang.StringBuilder;	specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();	$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  optCount: ");	$i8 = r1.<jdk.nashorn.internal.runtime.regexp.joni.ast.EncloseNode: int optCount>;	$r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);	$r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();	virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);	$r43 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();	return $r43
;block_num 1