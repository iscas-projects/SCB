(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var3286 0)
(declare-sort var3039 0)
(declare-sort var2439 0)
(declare-sort var3557 0)
(declare-sort var2461 0)
(declare-sort var1499 0)
(declare-sort var976 0)
(declare-sort var1648 0)
(declare-sort var3197 0)
(declare-sort var830 0)
(declare-sort var3620 0)
(declare-sort var3582 0)
(declare-sort var950 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-const var950!class ClassObject)
(declare-fun var3039_getValue/1809189437 (var3039) var2439)
(declare-fun cast-from-var2439-to-var3557 (var2439) var3557)
(declare-fun var3039_getMysqlType/-215853011 (var3039) var1499)
(declare-fun ordinal/-291641772 (var976) Int)
(declare-fun cast-from-var1499-to-var976 (var1499) var976)
(declare-fun arr-var2439-init () (Array Int var2439))
(declare-fun getClass/1258963082 (var2439) ClassObject)
(declare-fun getName/-1958580599 (ClassObject) String)
(declare-fun cast-from-String-to-var2439 (String) var2439)
(declare-fun toString/1761020461 (var976) String)
(declare-fun var1648_getString/1500902777 (String (Array Int var2439)) String)
(declare-fun exceptionInterceptor/-791602078 (var830) var3197)
(declare-fun cast-from-var3286-to-var830 (var3286) var830)
(declare-fun var3582_createException/-988168188 (ClassObject String var3197) var3620)
(declare-fun cast-from-var3620-to-var950 (var3620) var950)
(declare-const null-var3286 var3286)
(declare-const null-var3039 var3039)
(declare-const var2461-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const null-__Array__Int__var2439__ (Array Int var2439))
(declare-const var49 var3286) ; Statement: r20 := @this: com.mysql.cj.protocol.a.NumberValueEncoder 
(assert (not (= var49 null-var3286)))
(declare-const var687 var3039) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var687 null-var3039)))
(define-const var2917 var2439 (var3039_getValue/1809189437 var687)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var2828 Bool false) ; Statement: $z0 = $r1 instanceof java.math.BigDecimal 
 ; Statement: if $z0 == 0 goto $r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(assert (= (ite var2828 1 0) 0)) ; Cond: $z0 == 0 
(define-const var310 var2439 (var3039_getValue/1809189437 var687)) ; Statement: $r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var1100 var3557 (cast-from-var2439-to-var3557 var310)) ; Statement: $r27 = (java.lang.Number) $r2 
(assert true) ; Non Conditional
(define-const var2555 (Array Int Int) var2461-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.NumberValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var3865 var1499 (var3039_getMysqlType/-215853011 var687)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var1386 Int (ordinal/-291641772 (cast-from-var1499-to-var976 var3865))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var2552 Int (select var2555 var1386)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $l4 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 3: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 4: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 5: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 6: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 7: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 8: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 9: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 10: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 11: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 12: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 13: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 14: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 15: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 16: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 17: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 18: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 19: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 20: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 21: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 22: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 23: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 24: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 25: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 26: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 27: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 28: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 29: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 30: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 31: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 32: goto $z1 = $r27 instanceof java.math.BigDecimal;     default: goto $r14 = newarray (java.lang.Object)[2]; } 
(assert (and (not (= var2552 32)) (and (not (= var2552 31)) (and (not (= var2552 30)) (and (not (= var2552 29)) (and (not (= var2552 28)) (and (not (= var2552 27)) (and (not (= var2552 26)) (and (not (= var2552 25)) (and (not (= var2552 24)) (and (not (= var2552 23)) (and (not (= var2552 22)) (and (not (= var2552 21)) (and (not (= var2552 20)) (and (not (= var2552 19)) (and (not (= var2552 18)) (and (not (= var2552 17)) (and (not (= var2552 16)) (and (not (= var2552 15)) (and (not (= var2552 14)) (and (not (= var2552 13)) (and (not (= var2552 12)) (and (not (= var2552 11)) (and (not (= var2552 10)) (and (not (= var2552 9)) (and (not (= var2552 8)) (and (not (= var2552 7)) (and (not (= var2552 6)) (and (not (= var2552 5)) (and (not (= var2552 4)) (and (not (= var2552 3)) (and (not (= var2552 2)) (and (not (= var2552 1)) true))))))))))))))))))))))))))))))))) ; Intersect: Negate: Cond: $i1 == 32   and Intersect: Negate: Cond: $i1 == 31   and Intersect: Negate: Cond: $i1 == 30   and Intersect: Negate: Cond: $i1 == 29   and Intersect: Negate: Cond: $i1 == 28   and Intersect: Negate: Cond: $i1 == 27   and Intersect: Negate: Cond: $i1 == 26   and Intersect: Negate: Cond: $i1 == 25   and Intersect: Negate: Cond: $i1 == 24   and Intersect: Negate: Cond: $i1 == 23   and Intersect: Negate: Cond: $i1 == 22   and Intersect: Negate: Cond: $i1 == 21   and Intersect: Negate: Cond: $i1 == 20   and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                                
(define-const var3558 (Array Int var2439) arr-var2439-init) ; Statement: $r14 = newarray (java.lang.Object)[2] 
(define-const var2387 var2439 (var3039_getValue/1809189437 var687)) ; Statement: $r15 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(assert true)
(define-const var2103 ClassObject (getClass/1258963082 var2387)) ; Statement: $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>() 
(assert true)
(define-const var851 String (getName/-1958580599 var2103)) ; Statement: $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>() 
(declare-const var3558!1 (Array Int var2439))
(assert (not (= var3558!1 null-__Array__Int__var2439__)))
(assert (= (select var3558!1 0) (cast-from-String-to-var2439 var851))) ; Statement: $r14[0] = $r17 
(define-const var3703 var1499 (var3039_getMysqlType/-215853011 var687)) ; Statement: $r18 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var1571 String (toString/1761020461 (cast-from-var1499-to-var976 var3703))) ; Statement: $r19 = virtualinvoke $r18.<com.mysql.cj.MysqlType: java.lang.String toString()>() 
(declare-const var3558!2 (Array Int var2439))
(assert (not (= var3558!2 null-__Array__Int__var2439__)))
(assert (= (select var3558!2 1) (cast-from-String-to-var2439 var1571))) ; Statement: $r14[1] = $r19 
(define-const var3661 String (var1648_getString/1500902777 "PreparedStatement.67" var3558!2)) ; Statement: $r22 = staticinvoke <com.mysql.cj.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("PreparedStatement.67", $r14) 
(define-const var3336 var3197 (exceptionInterceptor/-791602078 (cast-from-var3286-to-var830 var49))) ; Statement: $r21 = r20.<com.mysql.cj.protocol.a.NumberValueEncoder: com.mysql.cj.exceptions.ExceptionInterceptor exceptionInterceptor> 
(define-const var2909 var3620 (var3582_createException/-988168188 var950!class var3661 var3336)) ; Statement: $r23 = staticinvoke <com.mysql.cj.exceptions.ExceptionFactory: com.mysql.cj.exceptions.CJException createException(java.lang.Class,java.lang.String,com.mysql.cj.exceptions.ExceptionInterceptor)>(class "Lcom/mysql/cj/exceptions/WrongArgumentException;", $r22, $r21) 
(define-const var2143 var950 (cast-from-var3620-to-var950 var2909)) ; Statement: $r24 = (com.mysql.cj.exceptions.WrongArgumentException) $r23 
 ; Statement: throw $r24 
(check-sat)
(get-model)
(get-unsat-core)
; {var3039_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var2439-to-var3557=([java.lang.Object], java.lang.Number), var3039_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var1499-to-var976=([com.mysql.cj.MysqlType], java.lang.Enum), arr-var2439-init=([], java.lang.Object[]), getClass/1258963082=([java.lang.Object], java.lang.Class), getName/-1958580599=([java.lang.Class], java.lang.String), cast-from-String-to-var2439=([java.lang.String], java.lang.Object), toString/1761020461=([java.lang.Enum], java.lang.String), var1648_getString/1500902777=([java.lang.String, java.lang.Object[]], java.lang.String), exceptionInterceptor/-791602078=([com.mysql.cj.protocol.a.AbstractValueEncoder], com.mysql.cj.exceptions.ExceptionInterceptor), cast-from-var3286-to-var830=([com.mysql.cj.protocol.a.NumberValueEncoder], com.mysql.cj.protocol.a.AbstractValueEncoder), var3582_createException/-988168188=([java.lang.Class, java.lang.String, com.mysql.cj.exceptions.ExceptionInterceptor], com.mysql.cj.exceptions.CJException), cast-from-var3620-to-var950=([com.mysql.cj.exceptions.CJException], com.mysql.cj.exceptions.WrongArgumentException)}
; {var3286=com.mysql.cj.protocol.a.NumberValueEncoder, var49=r20, var3039=com.mysql.cj.BindValue, var687=r0, var2439=java.lang.Object, var2917=$r1, var2828=$z0, var310=$r2, var3557=java.lang.Number, var1100=$r27, var2461=com.mysql.cj.protocol.a.NumberValueEncoder$1, var2555=$r3, var1499=com.mysql.cj.MysqlType, var3865=$r4, var976=java.lang.Enum, var1386=$i0, var2552=$i1, var3558=$r14, var2387=$r15, var2103=$r16, var851=$r17, var3703=$r18, var1571=$r19, var1648=com.mysql.cj.Messages, var3661=$r22, var3197=com.mysql.cj.exceptions.ExceptionInterceptor, var830=com.mysql.cj.protocol.a.AbstractValueEncoder, var3336=$r21, var3620=com.mysql.cj.exceptions.CJException, var3582=com.mysql.cj.exceptions.ExceptionFactory, var950=com.mysql.cj.exceptions.WrongArgumentException, var2909=$r23, var2143=$r24}
; {com.mysql.cj.protocol.a.NumberValueEncoder=var3286, r20=var49, com.mysql.cj.BindValue=var3039, r0=var687, java.lang.Object=var2439, $r1=var2917, $z0=var2828, $r2=var310, java.lang.Number=var3557, $r27=var1100, com.mysql.cj.protocol.a.NumberValueEncoder$1=var2461, $r3=var2555, com.mysql.cj.MysqlType=var1499, $r4=var3865, java.lang.Enum=var976, $i0=var1386, $i1=var2552, $r14=var3558, $r15=var2387, $r16=var2103, $r17=var851, $r18=var3703, $r19=var1571, com.mysql.cj.Messages=var1648, $r22=var3661, com.mysql.cj.exceptions.ExceptionInterceptor=var3197, com.mysql.cj.protocol.a.AbstractValueEncoder=var830, $r21=var3336, com.mysql.cj.exceptions.CJException=var3620, com.mysql.cj.exceptions.ExceptionFactory=var3582, com.mysql.cj.exceptions.WrongArgumentException=var950, $r23=var2909, $r24=var2143}
;seq <java.lang.Enum: java.lang.String toString()>
;cnt {}
;stmts r20 := @this: com.mysql.cj.protocol.a.NumberValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$z0 = $r1 instanceof java.math.BigDecimal;	if $z0 == 0 goto $r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$r27 = (java.lang.Number) $r2;	$r3 = <com.mysql.cj.protocol.a.NumberValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $l4 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 3: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 4: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 5: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 6: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 7: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 8: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 9: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 10: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 11: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 12: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 13: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 14: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 15: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 16: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 17: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 18: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 19: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 20: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 21: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 22: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 23: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 24: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 25: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 26: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 27: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 28: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 29: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 30: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 31: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 32: goto $z1 = $r27 instanceof java.math.BigDecimal;     default: goto $r14 = newarray (java.lang.Object)[2]; };	$r14 = newarray (java.lang.Object)[2];	$r15 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();	$r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();	$r14[0] = $r17;	$r18 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$r19 = virtualinvoke $r18.<com.mysql.cj.MysqlType: java.lang.String toString()>();	$r14[1] = $r19;	$r22 = staticinvoke <com.mysql.cj.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("PreparedStatement.67", $r14);	$r21 = r20.<com.mysql.cj.protocol.a.NumberValueEncoder: com.mysql.cj.exceptions.ExceptionInterceptor exceptionInterceptor>;	$r23 = staticinvoke <com.mysql.cj.exceptions.ExceptionFactory: com.mysql.cj.exceptions.CJException createException(java.lang.Class,java.lang.String,com.mysql.cj.exceptions.ExceptionInterceptor)>(class "Lcom/mysql/cj/exceptions/WrongArgumentException;", $r22, $r21);	$r24 = (com.mysql.cj.exceptions.WrongArgumentException) $r23;	throw $r24
;block_num 4