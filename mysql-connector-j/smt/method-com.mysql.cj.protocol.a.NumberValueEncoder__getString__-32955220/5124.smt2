(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1011 0)
(declare-sort var2404 0)
(declare-sort var2428 0)
(declare-sort var2165 0)
(declare-sort var1629 0)
(declare-sort var2355 0)
(declare-sort var1572 0)
(declare-sort var443 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var2404_getValue/1809189437 (var2404) var2428)
(declare-fun cast-from-var2428-to-var2165 (var2428) var2165)
(declare-fun var2404_getMysqlType/-215853011 (var2404) var2355)
(declare-fun ordinal/-291641772 (var1572) Int)
(declare-fun cast-from-var2355-to-var1572 (var2355) var1572)
(declare-fun floatValue/1369160421 (var2165) Float32)
(declare-fun Float32_toString/1458027134 (Float32) String)
(declare-fun var443_fixDecimalExponent/1765417736 (String) String)
(declare-const null-var1011 var1011)
(declare-const null-var2404 var2404)
(declare-const var1629-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const var1717 var1011) ; Statement: r20 := @this: com.mysql.cj.protocol.a.NumberValueEncoder 
(assert (not (= var1717 null-var1011)))
(declare-const var1135 var2404) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var1135 null-var2404)))
(define-const var3628 var2428 (var2404_getValue/1809189437 var1135)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var3336 Bool false) ; Statement: $z0 = $r1 instanceof java.math.BigDecimal 
 ; Statement: if $z0 == 0 goto $r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(assert (= (ite var3336 1 0) 0)) ; Cond: $z0 == 0 
(define-const var2394 var2428 (var2404_getValue/1809189437 var1135)) ; Statement: $r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var3379 var2165 (cast-from-var2428-to-var2165 var2394)) ; Statement: $r27 = (java.lang.Number) $r2 
(assert true) ; Non Conditional
(define-const var2940 (Array Int Int) var1629-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.NumberValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var2167 var2355 (var2404_getMysqlType/-215853011 var1135)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var3573 Int (ordinal/-291641772 (cast-from-var2355-to-var1572 var2167))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var3420 Int (select var2940 var3573)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $l4 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 3: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 4: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 5: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 6: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 7: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 8: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 9: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 10: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 11: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 12: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 13: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 14: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 15: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 16: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 17: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 18: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 19: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 20: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 21: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 22: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 23: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 24: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 25: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 26: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 27: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 28: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 29: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 30: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 31: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 32: goto $z1 = $r27 instanceof java.math.BigDecimal;     default: goto $r14 = newarray (java.lang.Object)[2]; } 
(assert (and (= var3420 15) (and (not (= var3420 14)) (and (not (= var3420 13)) (and (not (= var3420 12)) (and (not (= var3420 11)) (and (not (= var3420 10)) (and (not (= var3420 9)) (and (not (= var3420 8)) (and (not (= var3420 7)) (and (not (= var3420 6)) (and (not (= var3420 5)) (and (not (= var3420 4)) (and (not (= var3420 3)) (and (not (= var3420 2)) (and (not (= var3420 1)) true)))))))))))))))) ; Intersect: Cond: $i1 == 15  and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional               
(assert true)
(define-const var54 Float32 (floatValue/1369160421 var3379)) ; Statement: $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>() 
(define-const var1437 String (Float32_toString/1458027134 var54)) ; Statement: $r9 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0) 
(define-const var3009 String (var443_fixDecimalExponent/1765417736 var1437)) ; Statement: $r10 = staticinvoke <com.mysql.cj.util.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)>($r9) 
 ; Statement: return $r10 
(check-sat)
(get-model)
(get-unsat-core)
; {var2404_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var2428-to-var2165=([java.lang.Object], java.lang.Number), var2404_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var2355-to-var1572=([com.mysql.cj.MysqlType], java.lang.Enum), floatValue/1369160421=([java.lang.Number], float), Float32_toString/1458027134=([float], java.lang.String), var443_fixDecimalExponent/1765417736=([java.lang.String], java.lang.String)}
; {var1011=com.mysql.cj.protocol.a.NumberValueEncoder, var1717=r20, var2404=com.mysql.cj.BindValue, var1135=r0, var2428=java.lang.Object, var3628=$r1, var3336=$z0, var2394=$r2, var2165=java.lang.Number, var3379=$r27, var1629=com.mysql.cj.protocol.a.NumberValueEncoder$1, var2940=$r3, var2355=com.mysql.cj.MysqlType, var2167=$r4, var1572=java.lang.Enum, var3573=$i0, var3420=$i1, var54=$f0, var1437=$r9, var443=com.mysql.cj.util.StringUtils, var3009=$r10}
; {com.mysql.cj.protocol.a.NumberValueEncoder=var1011, r20=var1717, com.mysql.cj.BindValue=var2404, r0=var1135, java.lang.Object=var2428, $r1=var3628, $z0=var3336, $r2=var2394, java.lang.Number=var2165, $r27=var3379, com.mysql.cj.protocol.a.NumberValueEncoder$1=var1629, $r3=var2940, com.mysql.cj.MysqlType=var2355, $r4=var2167, java.lang.Enum=var1572, $i0=var3573, $i1=var3420, $f0=var54, $r9=var1437, com.mysql.cj.util.StringUtils=var443, $r10=var3009}
;seq <java.lang.Float: java.lang.String toString(float)>
;cnt {}
;stmts r20 := @this: com.mysql.cj.protocol.a.NumberValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$z0 = $r1 instanceof java.math.BigDecimal;	if $z0 == 0 goto $r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$r2 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$r27 = (java.lang.Number) $r2;	$r3 = <com.mysql.cj.protocol.a.NumberValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $l4 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 3: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 4: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 5: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 6: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 7: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 8: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 9: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 10: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 11: goto $i3 = virtualinvoke $r27.<java.lang.Number: int intValue()>();     case 12: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 13: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 14: goto $l2 = virtualinvoke $r27.<java.lang.Number: long longValue()>();     case 15: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 16: goto $f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();     case 17: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 18: goto $d0 = virtualinvoke $r27.<java.lang.Number: double doubleValue()>();     case 19: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 20: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 21: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 22: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 23: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 24: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 25: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 26: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 27: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 28: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 29: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 30: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 31: goto $z1 = $r27 instanceof java.math.BigDecimal;     case 32: goto $z1 = $r27 instanceof java.math.BigDecimal;     default: goto $r14 = newarray (java.lang.Object)[2]; };	$f0 = virtualinvoke $r27.<java.lang.Number: float floatValue()>();	$r9 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);	$r10 = staticinvoke <com.mysql.cj.util.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)>($r9);	return $r10
;block_num 4