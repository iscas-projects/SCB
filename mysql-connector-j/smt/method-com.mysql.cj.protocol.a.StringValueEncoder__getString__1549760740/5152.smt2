(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var3845 0)
(declare-sort var2083 0)
(declare-sort var1408 0)
(declare-sort var279 0)
(declare-sort var581 0)
(declare-sort var3017 0)
(declare-sort var3153 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var2083_getValue/1809189437 (var2083) var1408)
(declare-fun cast-from-var1408-to-String (var1408) String)
(declare-fun var2083_getMysqlType/-215853011 (var2083) var581)
(declare-fun ordinal/-291641772 (var3017) Int)
(declare-fun cast-from-var581-to-var3017 (var581) var3017)
(declare-fun Float64_parseDouble/1471110886 (String) Float64)
(declare-fun Float64_toString/-1342597490 (Float64) String)
(declare-fun var3153_fixDecimalExponent/1765417736 (String) String)
(declare-const null-var3845 var3845)
(declare-const null-var2083 var2083)
(declare-const var279-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const var2226 var3845) ; Statement: r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder 
(assert (not (= var2226 null-var3845)))
(declare-const var4 var2083) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var4 null-var2083)))
(define-const var1743 var1408 (var2083_getValue/1809189437 var4)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var1174 String (cast-from-var1408-to-String var1743)) ; Statement: r2 = (java.lang.String) $r1 
(define-const var3009 (Array Int Int) var279-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var2310 var581 (var2083_getMysqlType/-215853011 var4)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var1128 Int (ordinal/-291641772 (cast-from-var581-to-var3017 var2310))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var2745 Int (select var3009 var1128)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; } 
(assert (and (= var2745 32) (and (not (= var2745 31)) (and (not (= var2745 30)) (and (not (= var2745 29)) (and (not (= var2745 28)) (and (not (= var2745 27)) (and (not (= var2745 26)) (and (not (= var2745 25)) (and (not (= var2745 24)) (and (not (= var2745 23)) (and (not (= var2745 22)) (and (not (= var2745 21)) (and (not (= var2745 20)) (and (not (= var2745 19)) (and (not (= var2745 18)) (and (not (= var2745 17)) (and (not (= var2745 16)) (and (not (= var2745 15)) (and (not (= var2745 14)) (and (not (= var2745 13)) (and (not (= var2745 12)) (and (not (= var2745 11)) (and (not (= var2745 10)) (and (not (= var2745 9)) (and (not (= var2745 8)) (and (not (= var2745 7)) (and (not (= var2745 6)) (and (not (= var2745 5)) (and (not (= var2745 4)) (and (not (= var2745 3)) (and (not (= var2745 2)) (and (not (= var2745 1)) true))))))))))))))))))))))))))))))))) ; Intersect: Cond: $i1 == 32  and Intersect: Negate: Cond: $i1 == 31   and Intersect: Negate: Cond: $i1 == 30   and Intersect: Negate: Cond: $i1 == 29   and Intersect: Negate: Cond: $i1 == 28   and Intersect: Negate: Cond: $i1 == 27   and Intersect: Negate: Cond: $i1 == 26   and Intersect: Negate: Cond: $i1 == 25   and Intersect: Negate: Cond: $i1 == 24   and Intersect: Negate: Cond: $i1 == 23   and Intersect: Negate: Cond: $i1 == 22   and Intersect: Negate: Cond: $i1 == 21   and Intersect: Negate: Cond: $i1 == 20   and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                                
(define-const var18 Float64 (Float64_parseDouble/1471110886 var1174)) ; Statement: $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2) 
(define-const var1552 String (Float64_toString/-1342597490 var18)) ; Statement: $r98 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0) 
(define-const var1197 String (var3153_fixDecimalExponent/1765417736 var1552)) ; Statement: $r99 = staticinvoke <com.mysql.cj.util.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)>($r98) 
 ; Statement: return $r99 
(check-sat)
(get-model)
(get-unsat-core)
; {var2083_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var1408-to-String=([java.lang.Object], java.lang.String), var2083_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var581-to-var3017=([com.mysql.cj.MysqlType], java.lang.Enum), Float64_parseDouble/1471110886=([java.lang.String], double), Float64_toString/-1342597490=([double], java.lang.String), var3153_fixDecimalExponent/1765417736=([java.lang.String], java.lang.String)}
; {var3845=com.mysql.cj.protocol.a.StringValueEncoder, var2226=r11, var2083=com.mysql.cj.BindValue, var4=r0, var1408=java.lang.Object, var1743=$r1, var1174=r2, var279=com.mysql.cj.protocol.a.StringValueEncoder$1, var3009=$r3, var581=com.mysql.cj.MysqlType, var2310=$r4, var3017=java.lang.Enum, var1128=$i0, var2745=$i1, var18=$d0, var1552=$r98, var3153=com.mysql.cj.util.StringUtils, var1197=$r99}
; {com.mysql.cj.protocol.a.StringValueEncoder=var3845, r11=var2226, com.mysql.cj.BindValue=var2083, r0=var4, java.lang.Object=var1408, $r1=var1743, r2=var1174, com.mysql.cj.protocol.a.StringValueEncoder$1=var279, $r3=var3009, com.mysql.cj.MysqlType=var581, $r4=var2310, java.lang.Enum=var3017, $i0=var1128, $i1=var2745, $d0=var18, $r98=var1552, com.mysql.cj.util.StringUtils=var3153, $r99=var1197}
;seq <java.lang.Double: java.lang.String toString(double)>
;cnt {}
;stmts r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	r2 = (java.lang.String) $r1;	$r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; };	$d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);	$r98 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);	$r99 = staticinvoke <com.mysql.cj.util.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)>($r98);	return $r99
;block_num 2