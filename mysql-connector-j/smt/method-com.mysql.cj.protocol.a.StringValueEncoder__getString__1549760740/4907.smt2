(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var3790 0)
(declare-sort var1321 0)
(declare-sort var3315 0)
(declare-sort var1410 0)
(declare-sort var327 0)
(declare-sort var2248 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var1321_getValue/1809189437 (var1321) var3315)
(declare-fun cast-from-var3315-to-String (var3315) String)
(declare-fun var1321_getMysqlType/-215853011 (var1321) var327)
(declare-fun ordinal/-291641772 (var2248) Int)
(declare-fun cast-from-var327-to-var2248 (var327) var2248)
(declare-fun Int_parseInt/1370970945 (String) Int)
(declare-fun String_valueOf/1240665136 (Int) String)
(declare-const null-var3790 var3790)
(declare-const null-var1321 var1321)
(declare-const var1410-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const var727 var3790) ; Statement: r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder 
(assert (not (= var727 null-var3790)))
(declare-const var299 var1321) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var299 null-var1321)))
(define-const var1313 var3315 (var1321_getValue/1809189437 var299)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var1000 String (cast-from-var3315-to-String var1313)) ; Statement: r2 = (java.lang.String) $r1 
(define-const var943 (Array Int Int) var1410-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var3274 var327 (var1321_getMysqlType/-215853011 var299)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var1882 Int (ordinal/-291641772 (cast-from-var327-to-var2248 var3274))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var2821 Int (select var943 var1882)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; } 
(assert (and (= var2821 20) (and (not (= var2821 19)) (and (not (= var2821 18)) (and (not (= var2821 17)) (and (not (= var2821 16)) (and (not (= var2821 15)) (and (not (= var2821 14)) (and (not (= var2821 13)) (and (not (= var2821 12)) (and (not (= var2821 11)) (and (not (= var2821 10)) (and (not (= var2821 9)) (and (not (= var2821 8)) (and (not (= var2821 7)) (and (not (= var2821 6)) (and (not (= var2821 5)) (and (not (= var2821 4)) (and (not (= var2821 3)) (and (not (= var2821 2)) (and (not (= var2821 1)) true))))))))))))))))))))) ; Intersect: Cond: $i1 == 20  and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                    
(define-const var29 Int (Int_parseInt/1370970945 var1000)) ; Statement: $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) 
(define-const var642 String (String_valueOf/1240665136 var29)) ; Statement: $r105 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7) 
 ; Statement: return $r105 
(check-sat)
(get-model)
(get-unsat-core)
; {var1321_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var3315-to-String=([java.lang.Object], java.lang.String), var1321_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var327-to-var2248=([com.mysql.cj.MysqlType], java.lang.Enum), Int_parseInt/1370970945=([java.lang.String], int), String_valueOf/1240665136=([int], java.lang.String)}
; {var3790=com.mysql.cj.protocol.a.StringValueEncoder, var727=r11, var1321=com.mysql.cj.BindValue, var299=r0, var3315=java.lang.Object, var1313=$r1, var1000=r2, var1410=com.mysql.cj.protocol.a.StringValueEncoder$1, var943=$r3, var327=com.mysql.cj.MysqlType, var3274=$r4, var2248=java.lang.Enum, var1882=$i0, var2821=$i1, var29=$i7, var642=$r105}
; {com.mysql.cj.protocol.a.StringValueEncoder=var3790, r11=var727, com.mysql.cj.BindValue=var1321, r0=var299, java.lang.Object=var3315, $r1=var1313, r2=var1000, com.mysql.cj.protocol.a.StringValueEncoder$1=var1410, $r3=var943, com.mysql.cj.MysqlType=var327, $r4=var3274, java.lang.Enum=var2248, $i0=var1882, $i1=var2821, $i7=var29, $r105=var642}
;seq <java.lang.String: java.lang.String valueOf(int)>
;cnt {"<java.lang.String: java.lang.String valueOf(int)>": 1}
;stmts r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	r2 = (java.lang.String) $r1;	$r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; };	$i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);	$r105 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);	return $r105
;block_num 2