(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1671 0)
(declare-sort var3236 0)
(declare-sort var2923 0)
(declare-sort var2620 0)
(declare-sort var437 0)
(declare-sort var2849 0)
(declare-sort var3641 0)
(declare-sort var2564 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var3236_getValue/1809189437 (var3236) var2923)
(declare-fun cast-from-var2923-to-String (var2923) String)
(declare-fun var3236_getMysqlType/-215853011 (var3236) var437)
(declare-fun ordinal/-291641772 (var2849) Int)
(declare-fun cast-from-var437-to-var2849 (var437) var2849)
(declare-fun var3641-init () var3641)
(declare-fun <init>/-1588472495 (var3641 String) void)
(declare-fun var3236_getScaleOrLength/-620558396 (var3236) Int)
(declare-fun getScaled/575983753 (var2564 var3641 Int) var3641)
(declare-fun cast-from-var1671-to-var2564 (var1671) var2564)
(declare-fun toPlainString/-529633397 (var3641) String)
(declare-const null-var1671 var1671)
(declare-const null-var3236 var3236)
(declare-const var2620-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const var1096 var1671) ; Statement: r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder 
(assert (not (= var1096 null-var1671)))
(declare-const var3677 var3236) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var3677 null-var3236)))
(define-const var39 var2923 (var3236_getValue/1809189437 var3677)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var1655 String (cast-from-var2923-to-String var39)) ; Statement: r2 = (java.lang.String) $r1 
(define-const var1524 (Array Int Int) var2620-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var1861 var437 (var3236_getMysqlType/-215853011 var3677)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var2898 Int (ordinal/-291641772 (cast-from-var437-to-var2849 var1861))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var2957 Int (select var1524 var2898)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; } 
(assert (and (= var2957 34) (and (not (= var2957 33)) (and (not (= var2957 32)) (and (not (= var2957 31)) (and (not (= var2957 30)) (and (not (= var2957 29)) (and (not (= var2957 28)) (and (not (= var2957 27)) (and (not (= var2957 26)) (and (not (= var2957 25)) (and (not (= var2957 24)) (and (not (= var2957 23)) (and (not (= var2957 22)) (and (not (= var2957 21)) (and (not (= var2957 20)) (and (not (= var2957 19)) (and (not (= var2957 18)) (and (not (= var2957 17)) (and (not (= var2957 16)) (and (not (= var2957 15)) (and (not (= var2957 14)) (and (not (= var2957 13)) (and (not (= var2957 12)) (and (not (= var2957 11)) (and (not (= var2957 10)) (and (not (= var2957 9)) (and (not (= var2957 8)) (and (not (= var2957 7)) (and (not (= var2957 6)) (and (not (= var2957 5)) (and (not (= var2957 4)) (and (not (= var2957 3)) (and (not (= var2957 2)) (and (not (= var2957 1)) true))))))))))))))))))))))))))))))))))) ; Intersect: Cond: $i1 == 34  and Intersect: Negate: Cond: $i1 == 33   and Intersect: Negate: Cond: $i1 == 32   and Intersect: Negate: Cond: $i1 == 31   and Intersect: Negate: Cond: $i1 == 30   and Intersect: Negate: Cond: $i1 == 29   and Intersect: Negate: Cond: $i1 == 28   and Intersect: Negate: Cond: $i1 == 27   and Intersect: Negate: Cond: $i1 == 26   and Intersect: Negate: Cond: $i1 == 25   and Intersect: Negate: Cond: $i1 == 24   and Intersect: Negate: Cond: $i1 == 23   and Intersect: Negate: Cond: $i1 == 22   and Intersect: Negate: Cond: $i1 == 21   and Intersect: Negate: Cond: $i1 == 20   and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                                  
(define-const var1926 var3641 var3641-init) ; Statement: $r95 = new java.math.BigDecimal 
(assert true)
;(assert (<init>/-1588472495 var1926 var1655)) ; Statement: specialinvoke $r95.<java.math.BigDecimal: void <init>(java.lang.String)>(r2) 

(declare-const var1926!1 var3641)
(declare-const var1655!1 String)
(define-const var2415 Int (var3236_getScaleOrLength/-620558396 var3677)) ; Statement: $l4 = interfaceinvoke r0.<com.mysql.cj.BindValue: long getScaleOrLength()>() 
(assert true)
(define-const var3592 var3641 (getScaled/575983753 (cast-from-var1671-to-var2564 var1096) var1926!1 var2415)) ; Statement: $r96 = virtualinvoke r11.<com.mysql.cj.protocol.a.StringValueEncoder: java.math.BigDecimal getScaled(java.math.BigDecimal,long)>($r95, $l4) 
(assert true)
(define-const var81 String (toPlainString/-529633397 var3592)) ; Statement: $r97 = virtualinvoke $r96.<java.math.BigDecimal: java.lang.String toPlainString()>() 
 ; Statement: return $r97 
(check-sat)
(get-model)
(get-unsat-core)
; {var3236_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var2923-to-String=([java.lang.Object], java.lang.String), var3236_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var437-to-var2849=([com.mysql.cj.MysqlType], java.lang.Enum), var3641-init=([], java.math.BigDecimal), <init>/-1588472495=([java.math.BigDecimal, java.lang.String], void), var3236_getScaleOrLength/-620558396=([com.mysql.cj.BindValue], long), getScaled/575983753=([com.mysql.cj.protocol.a.AbstractValueEncoder, java.math.BigDecimal, long], java.math.BigDecimal), cast-from-var1671-to-var2564=([com.mysql.cj.protocol.a.StringValueEncoder], com.mysql.cj.protocol.a.AbstractValueEncoder), toPlainString/-529633397=([java.math.BigDecimal], java.lang.String)}
; {var1671=com.mysql.cj.protocol.a.StringValueEncoder, var1096=r11, var3236=com.mysql.cj.BindValue, var3677=r0, var2923=java.lang.Object, var39=$r1, var1655=r2, var2620=com.mysql.cj.protocol.a.StringValueEncoder$1, var1524=$r3, var437=com.mysql.cj.MysqlType, var1861=$r4, var2849=java.lang.Enum, var2898=$i0, var2957=$i1, var3641=java.math.BigDecimal, var1926=$r95, var2415=$l4, var2564=com.mysql.cj.protocol.a.AbstractValueEncoder, var3592=$r96, var81=$r97}
; {com.mysql.cj.protocol.a.StringValueEncoder=var1671, r11=var1096, com.mysql.cj.BindValue=var3236, r0=var3677, java.lang.Object=var2923, $r1=var39, r2=var1655, com.mysql.cj.protocol.a.StringValueEncoder$1=var2620, $r3=var1524, com.mysql.cj.MysqlType=var437, $r4=var1861, java.lang.Enum=var2849, $i0=var2898, $i1=var2957, java.math.BigDecimal=var3641, $r95=var1926, $l4=var2415, com.mysql.cj.protocol.a.AbstractValueEncoder=var2564, $r96=var3592, $r97=var81}
;seq 
;cnt {}
;stmts r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	r2 = (java.lang.String) $r1;	$r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; };	$r95 = new java.math.BigDecimal;	specialinvoke $r95.<java.math.BigDecimal: void <init>(java.lang.String)>(r2);	$l4 = interfaceinvoke r0.<com.mysql.cj.BindValue: long getScaleOrLength()>();	$r96 = virtualinvoke r11.<com.mysql.cj.protocol.a.StringValueEncoder: java.math.BigDecimal getScaled(java.math.BigDecimal,long)>($r95, $l4);	$r97 = virtualinvoke $r96.<java.math.BigDecimal: java.lang.String toPlainString()>();	return $r97
;block_num 2