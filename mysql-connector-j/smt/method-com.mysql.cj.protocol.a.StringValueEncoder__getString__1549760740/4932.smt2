(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var1749 0)
(declare-sort var1486 0)
(declare-sort var1274 0)
(declare-sort var317 0)
(declare-sort var252 0)
(declare-sort var352 0)
(declare-sort var1673 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var1486_getValue/1809189437 (var1486) var1274)
(declare-fun cast-from-var1274-to-String (var1274) String)
(declare-fun var1486_getMysqlType/-215853011 (var1486) var252)
(declare-fun ordinal/-291641772 (var352) Int)
(declare-fun cast-from-var252-to-var352 (var252) var352)
(declare-fun Float32_parseFloat/-1274905469 (String) Float32)
(declare-fun Float32_toString/1458027134 (Float32) String)
(declare-fun var1673_fixDecimalExponent/1765417736 (String) String)
(declare-const null-var1749 var1749)
(declare-const null-var1486 var1486)
(declare-const var317-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const var3933 var1749) ; Statement: r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder 
(assert (not (= var3933 null-var1749)))
(declare-const var3049 var1486) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var3049 null-var1486)))
(define-const var3677 var1274 (var1486_getValue/1809189437 var3049)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var1051 String (cast-from-var1274-to-String var3677)) ; Statement: r2 = (java.lang.String) $r1 
(define-const var3240 (Array Int Int) var317-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var1037 var252 (var1486_getMysqlType/-215853011 var3049)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var2389 Int (ordinal/-291641772 (cast-from-var252-to-var352 var1037))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var815 Int (select var3240 var2389)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; } 
(assert (and (= var815 30) (and (not (= var815 29)) (and (not (= var815 28)) (and (not (= var815 27)) (and (not (= var815 26)) (and (not (= var815 25)) (and (not (= var815 24)) (and (not (= var815 23)) (and (not (= var815 22)) (and (not (= var815 21)) (and (not (= var815 20)) (and (not (= var815 19)) (and (not (= var815 18)) (and (not (= var815 17)) (and (not (= var815 16)) (and (not (= var815 15)) (and (not (= var815 14)) (and (not (= var815 13)) (and (not (= var815 12)) (and (not (= var815 11)) (and (not (= var815 10)) (and (not (= var815 9)) (and (not (= var815 8)) (and (not (= var815 7)) (and (not (= var815 6)) (and (not (= var815 5)) (and (not (= var815 4)) (and (not (= var815 3)) (and (not (= var815 2)) (and (not (= var815 1)) true))))))))))))))))))))))))))))))) ; Intersect: Cond: $i1 == 30  and Intersect: Negate: Cond: $i1 == 29   and Intersect: Negate: Cond: $i1 == 28   and Intersect: Negate: Cond: $i1 == 27   and Intersect: Negate: Cond: $i1 == 26   and Intersect: Negate: Cond: $i1 == 25   and Intersect: Negate: Cond: $i1 == 24   and Intersect: Negate: Cond: $i1 == 23   and Intersect: Negate: Cond: $i1 == 22   and Intersect: Negate: Cond: $i1 == 21   and Intersect: Negate: Cond: $i1 == 20   and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                              
(define-const var2648 Float32 (Float32_parseFloat/-1274905469 var1051)) ; Statement: $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2) 
(define-const var893 String (Float32_toString/1458027134 var2648)) ; Statement: $r100 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0) 
(define-const var1077 String (var1673_fixDecimalExponent/1765417736 var893)) ; Statement: $r101 = staticinvoke <com.mysql.cj.util.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)>($r100) 
 ; Statement: return $r101 
(check-sat)
(get-model)
(get-unsat-core)
; {var1486_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var1274-to-String=([java.lang.Object], java.lang.String), var1486_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var252-to-var352=([com.mysql.cj.MysqlType], java.lang.Enum), Float32_parseFloat/-1274905469=([java.lang.String], float), Float32_toString/1458027134=([float], java.lang.String), var1673_fixDecimalExponent/1765417736=([java.lang.String], java.lang.String)}
; {var1749=com.mysql.cj.protocol.a.StringValueEncoder, var3933=r11, var1486=com.mysql.cj.BindValue, var3049=r0, var1274=java.lang.Object, var3677=$r1, var1051=r2, var317=com.mysql.cj.protocol.a.StringValueEncoder$1, var3240=$r3, var252=com.mysql.cj.MysqlType, var1037=$r4, var352=java.lang.Enum, var2389=$i0, var815=$i1, var2648=$f0, var893=$r100, var1673=com.mysql.cj.util.StringUtils, var1077=$r101}
; {com.mysql.cj.protocol.a.StringValueEncoder=var1749, r11=var3933, com.mysql.cj.BindValue=var1486, r0=var3049, java.lang.Object=var1274, $r1=var3677, r2=var1051, com.mysql.cj.protocol.a.StringValueEncoder$1=var317, $r3=var3240, com.mysql.cj.MysqlType=var252, $r4=var1037, java.lang.Enum=var352, $i0=var2389, $i1=var815, $f0=var2648, $r100=var893, com.mysql.cj.util.StringUtils=var1673, $r101=var1077}
;seq <java.lang.Float: java.lang.String toString(float)>
;cnt {}
;stmts r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	r2 = (java.lang.String) $r1;	$r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; };	$f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);	$r100 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);	$r101 = staticinvoke <com.mysql.cj.util.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)>($r100);	return $r101
;block_num 2