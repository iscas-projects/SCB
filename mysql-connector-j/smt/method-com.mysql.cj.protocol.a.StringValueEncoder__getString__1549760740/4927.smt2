(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var2117 0)
(declare-sort var3132 0)
(declare-sort var1612 0)
(declare-sort var2616 0)
(declare-sort var3103 0)
(declare-sort var3887 0)
(declare-sort var3537 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-fun var3132_getValue/1809189437 (var3132) var1612)
(declare-fun cast-from-var1612-to-String (var1612) String)
(declare-fun var3132_getMysqlType/-215853011 (var3132) var3103)
(declare-fun ordinal/-291641772 (var3887) Int)
(declare-fun cast-from-var3103-to-var3887 (var3103) var3887)
(declare-fun var3537-init () var3537)
(declare-fun <init>/-169914562 (var3537 String) void)
(declare-fun longValue/327287250 (var3537) Int)
(declare-fun String_valueOf/-107395227 (Int) String)
(declare-const null-var2117 var2117)
(declare-const null-var3132 var3132)
(declare-const var2616-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const var2376 var2117) ; Statement: r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder 
(assert (not (= var2376 null-var2117)))
(declare-const var1644 var3132) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var1644 null-var3132)))
(define-const var752 var1612 (var3132_getValue/1809189437 var1644)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var3306 String (cast-from-var1612-to-String var752)) ; Statement: r2 = (java.lang.String) $r1 
(define-const var1089 (Array Int Int) var2616-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var3550 var3103 (var3132_getMysqlType/-215853011 var1644)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var3041 Int (ordinal/-291641772 (cast-from-var3103-to-var3887 var3550))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var3216 Int (select var1089 var3041)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; } 
(assert (and (= var3216 29) (and (not (= var3216 28)) (and (not (= var3216 27)) (and (not (= var3216 26)) (and (not (= var3216 25)) (and (not (= var3216 24)) (and (not (= var3216 23)) (and (not (= var3216 22)) (and (not (= var3216 21)) (and (not (= var3216 20)) (and (not (= var3216 19)) (and (not (= var3216 18)) (and (not (= var3216 17)) (and (not (= var3216 16)) (and (not (= var3216 15)) (and (not (= var3216 14)) (and (not (= var3216 13)) (and (not (= var3216 12)) (and (not (= var3216 11)) (and (not (= var3216 10)) (and (not (= var3216 9)) (and (not (= var3216 8)) (and (not (= var3216 7)) (and (not (= var3216 6)) (and (not (= var3216 5)) (and (not (= var3216 4)) (and (not (= var3216 3)) (and (not (= var3216 2)) (and (not (= var3216 1)) true)))))))))))))))))))))))))))))) ; Intersect: Cond: $i1 == 29  and Intersect: Negate: Cond: $i1 == 28   and Intersect: Negate: Cond: $i1 == 27   and Intersect: Negate: Cond: $i1 == 26   and Intersect: Negate: Cond: $i1 == 25   and Intersect: Negate: Cond: $i1 == 24   and Intersect: Negate: Cond: $i1 == 23   and Intersect: Negate: Cond: $i1 == 22   and Intersect: Negate: Cond: $i1 == 21   and Intersect: Negate: Cond: $i1 == 20   and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                             
(define-const var1311 var3537 var3537-init) ; Statement: $r102 = new java.math.BigInteger 
(assert true)
;(assert (<init>/-169914562 var1311 var3306)) ; Statement: specialinvoke $r102.<java.math.BigInteger: void <init>(java.lang.String)>(r2) 

(declare-const var1311!1 var3537)
(declare-const var3306!1 String)
(assert true)
(define-const var2130 Int (longValue/327287250 var1311!1)) ; Statement: $l5 = virtualinvoke $r102.<java.math.BigInteger: long longValue()>() 
(define-const var2609 String (String_valueOf/-107395227 var2130)) ; Statement: $r103 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l5) 
 ; Statement: return $r103 
(check-sat)
(get-model)
(get-unsat-core)
; {var3132_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var1612-to-String=([java.lang.Object], java.lang.String), var3132_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var3103-to-var3887=([com.mysql.cj.MysqlType], java.lang.Enum), var3537-init=([], java.math.BigInteger), <init>/-169914562=([java.math.BigInteger, java.lang.String], void), longValue/327287250=([java.math.BigInteger], long), String_valueOf/-107395227=([long], java.lang.String)}
; {var2117=com.mysql.cj.protocol.a.StringValueEncoder, var2376=r11, var3132=com.mysql.cj.BindValue, var1644=r0, var1612=java.lang.Object, var752=$r1, var3306=r2, var2616=com.mysql.cj.protocol.a.StringValueEncoder$1, var1089=$r3, var3103=com.mysql.cj.MysqlType, var3550=$r4, var3887=java.lang.Enum, var3041=$i0, var3216=$i1, var3537=java.math.BigInteger, var1311=$r102, var2130=$l5, var2609=$r103}
; {com.mysql.cj.protocol.a.StringValueEncoder=var2117, r11=var2376, com.mysql.cj.BindValue=var3132, r0=var1644, java.lang.Object=var1612, $r1=var752, r2=var3306, com.mysql.cj.protocol.a.StringValueEncoder$1=var2616, $r3=var1089, com.mysql.cj.MysqlType=var3103, $r4=var3550, java.lang.Enum=var3887, $i0=var3041, $i1=var3216, java.math.BigInteger=var3537, $r102=var1311, $l5=var2130, $r103=var2609}
;seq <java.lang.String: java.lang.String valueOf(long)>
;cnt {"<java.lang.String: java.lang.String valueOf(long)>": 1}
;stmts r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	r2 = (java.lang.String) $r1;	$r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; };	$r102 = new java.math.BigInteger;	specialinvoke $r102.<java.math.BigInteger: void <init>(java.lang.String)>(r2);	$l5 = virtualinvoke $r102.<java.math.BigInteger: long longValue()>();	$r103 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l5);	return $r103
;block_num 2