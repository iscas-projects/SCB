(set-option :produce-unsat-cores true) ; enable generation of unsat cores
(set-option :produce-models true) ; enable model generation
(set-logic ALL)
(declare-sort var3442 0)
(declare-sort var3776 0)
(declare-sort var1136 0)
(declare-sort var2187 0)
(declare-sort var2380 0)
(declare-sort var3521 0)
(declare-sort var1102 0)
(declare-sort var1804 0)
(declare-sort var1183 0)
(declare-sort var2250 0)
(declare-sort var1771 0)
(declare-sort var728 0)
(declare-sort void 0)
(declare-sort Iterator 0)
(declare-sort ClassObject 0)
(declare-const var728!class ClassObject)
(declare-fun var3776_getValue/1809189437 (var3776) var1136)
(declare-fun cast-from-var1136-to-String (var1136) String)
(declare-fun var3776_getMysqlType/-215853011 (var3776) var2380)
(declare-fun ordinal/-291641772 (var3521) Int)
(declare-fun cast-from-var2380-to-var3521 (var2380) var3521)
(declare-fun arr-var1136-init () (Array Int var1136))
(declare-fun getClass/1258963082 (var1136) ClassObject)
(declare-fun getName/-1958580599 (ClassObject) String)
(declare-fun cast-from-String-to-var1136 (String) var1136)
(declare-fun toString/1761020461 (var3521) String)
(declare-fun var1102_getString/1500902777 (String (Array Int var1136)) String)
(declare-fun exceptionInterceptor/-791602078 (var1183) var1804)
(declare-fun cast-from-var3442-to-var1183 (var3442) var1183)
(declare-fun var1771_createException/-988168188 (ClassObject String var1804) var2250)
(declare-fun cast-from-var2250-to-var728 (var2250) var728)
(declare-const null-var3442 var3442)
(declare-const null-var3776 var3776)
(declare-const var2187-$SwitchMap$com$mysql$cj$MysqlType (Array Int Int))
(declare-const null-__Array__Int__var1136__ (Array Int var1136))
(declare-const var568 var3442) ; Statement: r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder 
(assert (not (= var568 null-var3442)))
(declare-const var3345 var3776) ; Statement: r0 := @parameter0: com.mysql.cj.BindValue 
(assert (not (= var3345 null-var3776)))
(define-const var3193 var1136 (var3776_getValue/1809189437 var3345)) ; Statement: $r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(define-const var2964 String (cast-from-var1136-to-String var3193)) ; Statement: r2 = (java.lang.String) $r1 
(define-const var2087 (Array Int Int) var2187-$SwitchMap$com$mysql$cj$MysqlType) ; Statement: $r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType> 
(define-const var84 var2380 (var3776_getMysqlType/-215853011 var3345)) ; Statement: $r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var647 Int (ordinal/-291641772 (cast-from-var2380-to-var3521 var84))) ; Statement: $i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>() 
(define-const var3661 Int (select var2087 var647)) ; Statement: $i1 = $r3[$i0] 
 ; Statement: tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; } 
(assert (and (not (= var3661 40)) (and (not (= var3661 39)) (and (not (= var3661 38)) (and (not (= var3661 37)) (and (not (= var3661 36)) (and (not (= var3661 35)) (and (not (= var3661 34)) (and (not (= var3661 33)) (and (not (= var3661 32)) (and (not (= var3661 31)) (and (not (= var3661 30)) (and (not (= var3661 29)) (and (not (= var3661 28)) (and (not (= var3661 27)) (and (not (= var3661 26)) (and (not (= var3661 25)) (and (not (= var3661 24)) (and (not (= var3661 23)) (and (not (= var3661 22)) (and (not (= var3661 21)) (and (not (= var3661 20)) (and (not (= var3661 19)) (and (not (= var3661 18)) (and (not (= var3661 17)) (and (not (= var3661 16)) (and (not (= var3661 15)) (and (not (= var3661 14)) (and (not (= var3661 13)) (and (not (= var3661 12)) (and (not (= var3661 11)) (and (not (= var3661 10)) (and (not (= var3661 9)) (and (not (= var3661 8)) (and (not (= var3661 7)) (and (not (= var3661 6)) (and (not (= var3661 5)) (and (not (= var3661 4)) (and (not (= var3661 3)) (and (not (= var3661 2)) (and (not (= var3661 1)) true))))))))))))))))))))))))))))))))))))))))) ; Intersect: Negate: Cond: $i1 == 40   and Intersect: Negate: Cond: $i1 == 39   and Intersect: Negate: Cond: $i1 == 38   and Intersect: Negate: Cond: $i1 == 37   and Intersect: Negate: Cond: $i1 == 36   and Intersect: Negate: Cond: $i1 == 35   and Intersect: Negate: Cond: $i1 == 34   and Intersect: Negate: Cond: $i1 == 33   and Intersect: Negate: Cond: $i1 == 32   and Intersect: Negate: Cond: $i1 == 31   and Intersect: Negate: Cond: $i1 == 30   and Intersect: Negate: Cond: $i1 == 29   and Intersect: Negate: Cond: $i1 == 28   and Intersect: Negate: Cond: $i1 == 27   and Intersect: Negate: Cond: $i1 == 26   and Intersect: Negate: Cond: $i1 == 25   and Intersect: Negate: Cond: $i1 == 24   and Intersect: Negate: Cond: $i1 == 23   and Intersect: Negate: Cond: $i1 == 22   and Intersect: Negate: Cond: $i1 == 21   and Intersect: Negate: Cond: $i1 == 20   and Intersect: Negate: Cond: $i1 == 19   and Intersect: Negate: Cond: $i1 == 18   and Intersect: Negate: Cond: $i1 == 17   and Intersect: Negate: Cond: $i1 == 16   and Intersect: Negate: Cond: $i1 == 15   and Intersect: Negate: Cond: $i1 == 14   and Intersect: Negate: Cond: $i1 == 13   and Intersect: Negate: Cond: $i1 == 12   and Intersect: Negate: Cond: $i1 == 11   and Intersect: Negate: Cond: $i1 == 10   and Intersect: Negate: Cond: $i1 == 9   and Intersect: Negate: Cond: $i1 == 8   and Intersect: Negate: Cond: $i1 == 7   and Intersect: Negate: Cond: $i1 == 6   and Intersect: Negate: Cond: $i1 == 5   and Intersect: Negate: Cond: $i1 == 4   and Intersect: Negate: Cond: $i1 == 3   and Intersect: Negate: Cond: $i1 == 2   and Intersect: Negate: Cond: $i1 == 1   and Non Conditional                                        
(define-const var655 (Array Int var1136) arr-var1136-init) ; Statement: $r118 = newarray (java.lang.Object)[2] 
(define-const var995 var1136 (var3776_getValue/1809189437 var3345)) ; Statement: $r119 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>() 
(assert true)
(define-const var2288 ClassObject (getClass/1258963082 var995)) ; Statement: $r120 = virtualinvoke $r119.<java.lang.Object: java.lang.Class getClass()>() 
(assert true)
(define-const var400 String (getName/-1958580599 var2288)) ; Statement: $r121 = virtualinvoke $r120.<java.lang.Class: java.lang.String getName()>() 
(declare-const var655!1 (Array Int var1136))
(assert (not (= var655!1 null-__Array__Int__var1136__)))
(assert (= (select var655!1 0) (cast-from-String-to-var1136 var400))) ; Statement: $r118[0] = $r121 
(define-const var2715 var2380 (var3776_getMysqlType/-215853011 var3345)) ; Statement: $r122 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>() 
(assert true)
(define-const var1896 String (toString/1761020461 (cast-from-var2380-to-var3521 var2715))) ; Statement: $r123 = virtualinvoke $r122.<com.mysql.cj.MysqlType: java.lang.String toString()>() 
(declare-const var655!2 (Array Int var1136))
(assert (not (= var655!2 null-__Array__Int__var1136__)))
(assert (= (select var655!2 1) (cast-from-String-to-var1136 var1896))) ; Statement: $r118[1] = $r123 
(define-const var1352 String (var1102_getString/1500902777 "PreparedStatement.67" var655!2)) ; Statement: $r125 = staticinvoke <com.mysql.cj.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("PreparedStatement.67", $r118) 
(define-const var122 var1804 (exceptionInterceptor/-791602078 (cast-from-var3442-to-var1183 var568))) ; Statement: $r124 = r11.<com.mysql.cj.protocol.a.StringValueEncoder: com.mysql.cj.exceptions.ExceptionInterceptor exceptionInterceptor> 
(define-const var3705 var2250 (var1771_createException/-988168188 var728!class var1352 var122)) ; Statement: $r126 = staticinvoke <com.mysql.cj.exceptions.ExceptionFactory: com.mysql.cj.exceptions.CJException createException(java.lang.Class,java.lang.String,com.mysql.cj.exceptions.ExceptionInterceptor)>(class "Lcom/mysql/cj/exceptions/WrongArgumentException;", $r125, $r124) 
(define-const var2420 var728 (cast-from-var2250-to-var728 var3705)) ; Statement: $r127 = (com.mysql.cj.exceptions.WrongArgumentException) $r126 
 ; Statement: throw $r127 
(check-sat)
(get-model)
(get-unsat-core)
; {var3776_getValue/1809189437=([com.mysql.cj.BindValue], java.lang.Object), cast-from-var1136-to-String=([java.lang.Object], java.lang.String), var3776_getMysqlType/-215853011=([com.mysql.cj.BindValue], com.mysql.cj.MysqlType), ordinal/-291641772=([java.lang.Enum], int), cast-from-var2380-to-var3521=([com.mysql.cj.MysqlType], java.lang.Enum), arr-var1136-init=([], java.lang.Object[]), getClass/1258963082=([java.lang.Object], java.lang.Class), getName/-1958580599=([java.lang.Class], java.lang.String), cast-from-String-to-var1136=([java.lang.String], java.lang.Object), toString/1761020461=([java.lang.Enum], java.lang.String), var1102_getString/1500902777=([java.lang.String, java.lang.Object[]], java.lang.String), exceptionInterceptor/-791602078=([com.mysql.cj.protocol.a.AbstractValueEncoder], com.mysql.cj.exceptions.ExceptionInterceptor), cast-from-var3442-to-var1183=([com.mysql.cj.protocol.a.StringValueEncoder], com.mysql.cj.protocol.a.AbstractValueEncoder), var1771_createException/-988168188=([java.lang.Class, java.lang.String, com.mysql.cj.exceptions.ExceptionInterceptor], com.mysql.cj.exceptions.CJException), cast-from-var2250-to-var728=([com.mysql.cj.exceptions.CJException], com.mysql.cj.exceptions.WrongArgumentException)}
; {var3442=com.mysql.cj.protocol.a.StringValueEncoder, var568=r11, var3776=com.mysql.cj.BindValue, var3345=r0, var1136=java.lang.Object, var3193=$r1, var2964=r2, var2187=com.mysql.cj.protocol.a.StringValueEncoder$1, var2087=$r3, var2380=com.mysql.cj.MysqlType, var84=$r4, var3521=java.lang.Enum, var647=$i0, var3661=$i1, var655=$r118, var995=$r119, var2288=$r120, var400=$r121, var2715=$r122, var1896=$r123, var1102=com.mysql.cj.Messages, var1352=$r125, var1804=com.mysql.cj.exceptions.ExceptionInterceptor, var1183=com.mysql.cj.protocol.a.AbstractValueEncoder, var122=$r124, var2250=com.mysql.cj.exceptions.CJException, var1771=com.mysql.cj.exceptions.ExceptionFactory, var728=com.mysql.cj.exceptions.WrongArgumentException, var3705=$r126, var2420=$r127}
; {com.mysql.cj.protocol.a.StringValueEncoder=var3442, r11=var568, com.mysql.cj.BindValue=var3776, r0=var3345, java.lang.Object=var1136, $r1=var3193, r2=var2964, com.mysql.cj.protocol.a.StringValueEncoder$1=var2187, $r3=var2087, com.mysql.cj.MysqlType=var2380, $r4=var84, java.lang.Enum=var3521, $i0=var647, $i1=var3661, $r118=var655, $r119=var995, $r120=var2288, $r121=var400, $r122=var2715, $r123=var1896, com.mysql.cj.Messages=var1102, $r125=var1352, com.mysql.cj.exceptions.ExceptionInterceptor=var1804, com.mysql.cj.protocol.a.AbstractValueEncoder=var1183, $r124=var122, com.mysql.cj.exceptions.CJException=var2250, com.mysql.cj.exceptions.ExceptionFactory=var1771, com.mysql.cj.exceptions.WrongArgumentException=var728, $r126=var3705, $r127=var2420}
;seq <java.lang.Enum: java.lang.String toString()>
;cnt {}
;stmts r11 := @this: com.mysql.cj.protocol.a.StringValueEncoder;	r0 := @parameter0: com.mysql.cj.BindValue;	$r1 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	r2 = (java.lang.String) $r1;	$r3 = <com.mysql.cj.protocol.a.StringValueEncoder$1: int[] $SwitchMap$com$mysql$cj$MysqlType>;	$r4 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$i0 = virtualinvoke $r4.<com.mysql.cj.MysqlType: int ordinal()>();	$i1 = $r3[$i0];	tableswitch($i1) {     case 1: goto return "null";     case 2: goto $r116 = new java.lang.StringBuilder;     case 3: goto $r116 = new java.lang.StringBuilder;     case 4: goto $r116 = new java.lang.StringBuilder;     case 5: goto $r116 = new java.lang.StringBuilder;     case 6: goto $r116 = new java.lang.StringBuilder;     case 7: goto $r116 = new java.lang.StringBuilder;     case 8: goto $r116 = new java.lang.StringBuilder;     case 9: goto $r116 = new java.lang.StringBuilder;     case 10: goto $r116 = new java.lang.StringBuilder;     case 11: goto $r116 = new java.lang.StringBuilder;     case 12: goto $r116 = new java.lang.StringBuilder;     case 13: goto $r116 = new java.lang.StringBuilder;     case 14: goto $r116 = new java.lang.StringBuilder;     case 15: goto $r116 = new java.lang.StringBuilder;     case 16: goto $r116 = new java.lang.StringBuilder;     case 17: goto $r116 = new java.lang.StringBuilder;     case 18: goto $r106 = "true";     case 19: goto $r106 = "true";     case 20: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 21: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 22: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 23: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 24: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 25: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 26: goto $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);     case 27: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 28: goto $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);     case 29: goto $r102 = new java.math.BigInteger;     case 30: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 31: goto $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);     case 32: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 33: goto $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);     case 34: goto $r95 = new java.math.BigDecimal;     case 35: goto $r95 = new java.math.BigDecimal;     case 36: goto $r75 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 37: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 38: goto $r51 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 39: goto $r20 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     case 40: goto $r5 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();     default: goto $r118 = newarray (java.lang.Object)[2]; };	$r118 = newarray (java.lang.Object)[2];	$r119 = interfaceinvoke r0.<com.mysql.cj.BindValue: java.lang.Object getValue()>();	$r120 = virtualinvoke $r119.<java.lang.Object: java.lang.Class getClass()>();	$r121 = virtualinvoke $r120.<java.lang.Class: java.lang.String getName()>();	$r118[0] = $r121;	$r122 = interfaceinvoke r0.<com.mysql.cj.BindValue: com.mysql.cj.MysqlType getMysqlType()>();	$r123 = virtualinvoke $r122.<com.mysql.cj.MysqlType: java.lang.String toString()>();	$r118[1] = $r123;	$r125 = staticinvoke <com.mysql.cj.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("PreparedStatement.67", $r118);	$r124 = r11.<com.mysql.cj.protocol.a.StringValueEncoder: com.mysql.cj.exceptions.ExceptionInterceptor exceptionInterceptor>;	$r126 = staticinvoke <com.mysql.cj.exceptions.ExceptionFactory: com.mysql.cj.exceptions.CJException createException(java.lang.Class,java.lang.String,com.mysql.cj.exceptions.ExceptionInterceptor)>(class "Lcom/mysql/cj/exceptions/WrongArgumentException;", $r125, $r124);	$r127 = (com.mysql.cj.exceptions.WrongArgumentException) $r126;	throw $r127
;block_num 2